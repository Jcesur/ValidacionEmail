Compiling Program: D:\Downloads\ValidacionEmail\AppSrc\ValidacionEmail.src
Memory Available: 13050081280
1>//**************************************************************
1>// WindowsProject.tpl for Spanish translated by Moose Software (www.moose-software.com) 
1>// 28/10/2008 revised for VDF 14.1 by Moose Software  
1>// 13/07/2010 Revised for VDF 16.0 by Moose Software
1>// 05/02/2012 Revised for VDF 17.0 by Moose Software
1>// 13/06/2013 Revised for VDF 17.1 by Moose Software
1>// 02/05/2014 Revised for VDF 18.0 by Moose Software
1>// 09/10/2020 Revised for DataFlex 20.0 by Moose Software
1>// 31/01/2022 Revised for DataFlex 20.1 by Moose Software
1>//*************************************************************************************
1>Use DFAllEnt.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.x64.pkd    (C:\Program Files\DataFlex 24.0\Pkg\dfallent.x64.pkd)
73440>Use cCJStandardCommandBarSystem.pkg
Including file: cCJStandardCommandBarSystem.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJStandardCommandBarSystem.pkg)
73440>>>// these are all the packages used in a standard MDI menubar/toolbar system
73440>>>
73440>>>Use cCJCommandBarSystem.pkg
73440>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJStandardMenuItemClasses.pkg)
73440>>>>>Use Dfpanel.pkg
73440>>>>>Use cCJCommandBarSystem.pkg
73440>>>>>Use LanguageText.pkg
73440>>>>>
73440>>>>>
73440>>>>>Class cCJUndoMenuItem is a cCJMenuItem
73441>>>>>    
73441>>>>>    Procedure Construct_Object
73443>>>>>        Forward Send Construct_Object
73445>>>>>        Set psCaption   to C_$CaptionUndo
73446>>>>>        Set psToolTip to C_$ToolTipUndo
73447>>>>>        Set psDescription to C_$DescUndo
73448>>>>>        Set psImage to "ActionUndo.ico"
73449>>>>>        Set pbActiveUpdate to True
73450>>>>>        Set psCategory to C_$CategoryEdit
73451>>>>>        Set psShortcut to C_$Key_Ctrl_Z
73452>>>>>    End_Procedure
73453>>>>>    
73453>>>>>    Procedure OnExecute Variant vCommandBarControl
73455>>>>>        Send Undo of (focus(Self))
73456>>>>>    End_Procedure
73457>>>>>    
73457>>>>>    Function IsEnabled Returns Boolean
73459>>>>>        Boolean bEnabled
73459>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
73460>>>>>        Function_Return bEnabled
73461>>>>>    End_Function
73462>>>>>    
73462>>>>>End_Class
73463>>>>>
73463>>>>>
73463>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
73464>>>>>    
73464>>>>>    Procedure Construct_Object
73466>>>>>        Forward Send Construct_Object
73468>>>>>        Set psCaption   to C_$CaptionDelete
73469>>>>>        Set psToolTip to C_$ToolTipDelete
73470>>>>>        Set psDescription to C_$DescDelete
73471>>>>>        Set psImage to "actionDelete.ico"
73472>>>>>        Set psShortcut to C_$Key_Delete
73473>>>>>        Set pbActiveUpdate to True
73474>>>>>        Set psCategory to C_$CategoryEdit
73475>>>>>    End_Procedure
73476>>>>>    
73476>>>>>    
73476>>>>>    Procedure OnExecute Variant vCommandBarControl
73478>>>>>        Send Delete of (focus(Self))
73479>>>>>    End_Procedure
73480>>>>>    
73480>>>>>    Function IsEnabled Returns Boolean
73482>>>>>        Boolean bEnabled
73482>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
73483>>>>>        Function_Return bEnabled
73484>>>>>    End_Function
73485>>>>>    
73485>>>>>End_Class
73486>>>>>
73486>>>>>
73486>>>>>Class cCJCutMenuItem is a cCJMenuItem
73487>>>>>    
73487>>>>>    Procedure Construct_Object
73489>>>>>        Forward Send Construct_Object
73491>>>>>        Set psCaption   to C_$CaptionCut
73492>>>>>        Set psToolTip to C_$TooltipCut
73493>>>>>        Set psDescription to C_$DescCut
73494>>>>>        Set psImage to "actionCut.ico"
73495>>>>>        Set psShortcut to C_$Key_Ctrl_X
73496>>>>>        Set pbActiveUpdate to True
73497>>>>>        Set psCategory to C_$CategoryEdit
73498>>>>>    End_Procedure
73499>>>>>    
73499>>>>>    
73499>>>>>    Procedure OnExecute Variant vCommandBarControl
73501>>>>>        Send Cut of (focus(Self))
73502>>>>>    End_Procedure
73503>>>>>    
73503>>>>>    Function IsEnabled Returns Boolean
73505>>>>>        Boolean bEnabled
73505>>>>>        Get CanCut of (Focus(Self)) to bEnabled
73506>>>>>        Function_Return bEnabled
73507>>>>>    End_Function
73508>>>>>    
73508>>>>>End_Class
73509>>>>>
73509>>>>>
73509>>>>>Class cCJCopyMenuItem is a cCJMenuItem
73510>>>>>    
73510>>>>>    Procedure Construct_Object
73512>>>>>        Forward Send Construct_Object
73514>>>>>        Set psCaption   to C_$CaptionCopy
73515>>>>>        Set psToolTip to C_$ToolTipCopy
73516>>>>>        Set psDescription to C_$DescCopy
73517>>>>>        Set psImage to "actionCopy.ico"
73518>>>>>        Set psShortcut to C_$Key_Ctrl_C
73519>>>>>        Set pbActiveUpdate to True
73520>>>>>        Set psCategory to C_$CategoryEdit
73521>>>>>    End_Procedure
73522>>>>>    
73522>>>>>    
73522>>>>>    Procedure OnExecute Variant vCommandBarControl
73524>>>>>        Send Copy of (focus(Self))
73525>>>>>    End_Procedure
73526>>>>>    
73526>>>>>    Function IsEnabled Returns Boolean
73528>>>>>        Boolean bEnabled
73528>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
73529>>>>>        Function_Return bEnabled
73530>>>>>    End_Function
73531>>>>>    
73531>>>>>End_Class
73532>>>>>
73532>>>>>
73532>>>>>Class cCJPasteMenuItem is a cCJMenuItem
73533>>>>>    
73533>>>>>    Procedure Construct_Object
73535>>>>>        Forward Send Construct_Object
73537>>>>>        Set psCaption   to C_$CaptionPaste
73538>>>>>        Set psToolTip to C_$ToolTipPaste
73539>>>>>        Set psDescription to C_$DescPaste
73540>>>>>        Set psImage to "actionPaste.ico"
73541>>>>>        Set pbActiveUpdate to True
73542>>>>>        Set psShortcut to C_$Key_Ctrl_V
73543>>>>>        Set psCategory to C_$CategoryEdit
73544>>>>>    End_Procedure
73545>>>>>    
73545>>>>>    
73545>>>>>    Procedure OnExecute Variant vCommandBarControl
73547>>>>>        Send Paste of (focus(Self))
73548>>>>>    End_Procedure
73549>>>>>    
73549>>>>>    Function IsEnabled Returns Boolean
73551>>>>>        Boolean bEnabled
73551>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
73552>>>>>        Function_Return bEnabled
73553>>>>>    End_Function
73554>>>>>    
73554>>>>>End_Class
73555>>>>>
73555>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
73556>>>>>    
73556>>>>>    Procedure Construct_Object
73558>>>>>        Forward Send Construct_Object
73560>>>>>        Set psCaption   to C_$CaptionSelectAll
73561>>>>>        Set psToolTip to C_$ToolTipSelectAll
73562>>>>>        Set psDescription to C_$DescSelectAll
73563>>>>>        Set pbActiveUpdate to True
73564>>>>>        Set psShortcut to C_$Key_Ctrl_A
73565>>>>>        Set psCategory to C_$CategoryEdit
73566>>>>>    End_Procedure
73567>>>>>    
73567>>>>>    
73567>>>>>    Procedure OnExecute Variant vCommandBarControl
73569>>>>>        Send Select_All of (focus(Self))
73570>>>>>    End_Procedure
73571>>>>>    
73571>>>>>    Function IsEnabled Returns Boolean
73573>>>>>        Boolean bEnabled
73573>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
73574>>>>>        Function_Return bEnabled
73575>>>>>    End_Function
73576>>>>>    
73576>>>>>End_Class
73577>>>>>
73577>>>>>
73577>>>>>Class cCJExitMenuItem is a cCJMenuItem
73578>>>>>    
73578>>>>>    Procedure Construct_Object
73580>>>>>        Forward Send Construct_Object
73582>>>>>        Set psCaption to C_$CaptionExit
73583>>>>>        Set psToolTip to C_$ToolTipExit
73584>>>>>        Set psDescription to C_$ToolTipExit
73585>>>>>        Set psShortcut to C_$Key_Alt_F4
73586>>>>>        Set psCategory to C_$CategoryFile
73587>>>>>    End_Procedure
73588>>>>>    
73588>>>>>    Procedure OnExecute Variant vCommandBarControl
73590>>>>>        Send Exit_Application of Desktop
73591>>>>>    End_Procedure
73592>>>>>    
73592>>>>>End_Class
73593>>>>>
73593>>>>>Class cCJHelpMenuItem is a cCJMenuItem
73594>>>>>    
73594>>>>>    Procedure Construct_Object
73596>>>>>        Forward Send Construct_Object
73598>>>>>        Set psCaption to C_$CaptionHelp
73599>>>>>        Set psDescription to C_$ToolTipHelp
73600>>>>>        Set psToolTip to C_$DescHelp
73601>>>>>        Set psImage to "ActionHelp.ico"
73602>>>>>        Set psShortcut to "F1"
73603>>>>>        Set psCategory to C_$CategoryHelp
73604>>>>>    End_Procedure
73605>>>>>    
73605>>>>>    Procedure OnExecute Variant vCommandBarControl
73607>>>>>        Send Help of (Focus(Self))
73608>>>>>    End_Procedure
73609>>>>>    
73609>>>>>End_Class
73610>>>>>
73610>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
73611>>>>>    
73611>>>>>    Procedure Construct_Object
73613>>>>>        Forward Send Construct_Object
73615>>>>>        Set psCaption to C_$CaptionAddStatusbar
73616>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
73617>>>>>        Set psDescription to  C_$DescAddStatusbar
73618>>>>>        Set psCategory to C_$CategoryWindow
73619>>>>>    End_Procedure
73620>>>>>    
73620>>>>>    Procedure OnExecute Variant vCommandBarControl
73622>>>>>        Handle hoCommandBars hoClientArea
73622>>>>>        Get CommandBarSystemObject to hoCommandBars
73623>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73624>>>>>        If hoClientArea Begin
73626>>>>>            // the clientarea's parent panel has message
73626>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
73627>>>>>        End
73627>>>>>>
73627>>>>>    End_Procedure
73628>>>>>    
73628>>>>>    Function IsChecked Returns Boolean
73630>>>>>        Boolean bOn
73630>>>>>        Handle hoCommandBars hoClientArea
73630>>>>>        Get CommandBarSystemObject to hoCommandBars
73631>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73632>>>>>        If hoClientArea Begin
73634>>>>>            // the clientarea's parent panel has message
73634>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
73635>>>>>        End
73635>>>>>>
73635>>>>>        Function_Return bOn
73636>>>>>    End_Function
73637>>>>>End_Class
73638>>>>>
73638>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
73639>>>>>    
73639>>>>>    Procedure Construct_Object
73641>>>>>        Forward Send Construct_Object
73643>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
73644>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
73645>>>>>        Set psDescription to C_$DescAutoArrangeIcons
73646>>>>>        Set psCategory to C_$CategoryWindow
73647>>>>>    End_Procedure
73648>>>>>    
73648>>>>>    Procedure OnExecute Variant vCommandBarControl
73650>>>>>        Handle hoCommandBars hoClientArea
73650>>>>>        Get CommandBarSystemObject to hoCommandBars
73651>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73652>>>>>        If hoClientArea Begin
73654>>>>>            // the clientarea's parent panel has message
73654>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
73655>>>>>        End
73655>>>>>>
73655>>>>>    End_Procedure
73656>>>>>    
73656>>>>>    Function IsChecked Returns Boolean
73658>>>>>        Boolean bOn
73658>>>>>        Handle hoCommandBars hoClientArea
73658>>>>>        Get CommandBarSystemObject to hoCommandBars
73659>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73660>>>>>        If hoClientArea Begin
73662>>>>>            // the clientarea's parent panel has message
73662>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
73663>>>>>        End
73663>>>>>>
73663>>>>>        Function_Return bOn
73664>>>>>    End_Function
73665>>>>>End_Class
73666>>>>>
73666>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
73667>>>>>    
73667>>>>>    Procedure Construct_Object
73669>>>>>        Forward Send Construct_Object
73671>>>>>        Set psCaption to C_$CaptionRestoreMenus
73672>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
73673>>>>>        Set psDescription to C_$DescRestoreMenus
73674>>>>>        Set psCategory to C_$CategoryWindow
73675>>>>>    End_Procedure
73676>>>>>    
73676>>>>>    Procedure OnExecute Variant vCommandBarControl
73678>>>>>        Handle hoCommandBars
73678>>>>>        Get CommandBarSystemObject to hoCommandBars
73679>>>>>        Send RestoreLayout of hoCommandBars
73680>>>>>    End_Procedure
73681>>>>>    
73681>>>>>End_Class
73682>>>>>
73682>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
73683>>>>>    
73683>>>>>    Procedure Construct_Object
73685>>>>>        Forward Send Construct_Object
73687>>>>>        Set psCaption to C_$CaptionCascade
73688>>>>>        Set psToolTip to C_$ToolTipCascade
73689>>>>>        Set psDescription to  C_$DescCascade
73690>>>>>        Set psImage to "ActionCascade.ico"
73691>>>>>        Set psCategory to C_$CategoryWindow
73692>>>>>    End_Procedure
73693>>>>>    
73693>>>>>    Procedure OnExecute Variant vCommandBarControl
73695>>>>>        Handle hoCommandBars hoClientArea
73695>>>>>        Get CommandBarSystemObject to hoCommandBars
73696>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73697>>>>>        If hoClientArea Begin
73699>>>>>            Send Cascade_Windows of hoClientArea
73700>>>>>        End
73700>>>>>>
73700>>>>>    End_Procedure
73701>>>>>End_Class
73702>>>>>
73702>>>>>Class cCJTileHorizontally is a cCJMenuItem
73703>>>>>    
73703>>>>>    Procedure Construct_Object
73705>>>>>        Forward Send Construct_Object
73707>>>>>        Set psCaption to C_$CaptionTileHorizontally
73708>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
73709>>>>>        Set psDescription to  C_$DescTileHorizontally
73710>>>>>        Set psImage to "ActionTileHorizontally.ico"
73711>>>>>        Set psCategory to C_$CategoryWindow
73712>>>>>    End_Procedure
73713>>>>>    
73713>>>>>    Procedure OnExecute Variant vCommandBarControl
73715>>>>>        Handle hoCommandBars hoClientArea
73715>>>>>        Get CommandBarSystemObject to hoCommandBars
73716>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73717>>>>>        If hoClientArea Begin
73719>>>>>            Send Tile_Windows_Horizontal of hoClientArea
73720>>>>>        End
73720>>>>>>
73720>>>>>    End_Procedure
73721>>>>>End_Class
73722>>>>>
73722>>>>>Class cCJTileVertically is a cCJMenuItem
73723>>>>>    
73723>>>>>    Procedure Construct_Object
73725>>>>>        Forward Send Construct_Object
73727>>>>>        Set psCaption to C_$CaptionTileVertically
73728>>>>>        Set psToolTip to C_$ToolTipTileVertically
73729>>>>>        Set psDescription to  C_$DescTileVertically
73730>>>>>        Set psImage to "ActionTileVertically.ico"
73731>>>>>        Set psCategory to C_$CategoryWindow
73732>>>>>    End_Procedure
73733>>>>>    
73733>>>>>    Procedure OnExecute Variant vCommandBarControl
73735>>>>>        Handle hoCommandBars hoClientArea
73735>>>>>        Get CommandBarSystemObject to hoCommandBars
73736>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73737>>>>>        If hoClientArea Begin
73739>>>>>            Send Tile_Windows_Vertical of hoClientArea
73740>>>>>        End
73740>>>>>>
73740>>>>>    End_Procedure
73741>>>>>End_Class
73742>>>>>
73742>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
73743>>>>>    
73743>>>>>    Procedure Construct_Object
73745>>>>>        Forward Send Construct_Object
73747>>>>>        Set psCaption to C_$CaptionMinimizeWindows
73748>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
73749>>>>>        Set psDescription to  C_$DescMinimizeWindows
73750>>>>>        Set psCategory to C_$CategoryWindow
73751>>>>>    End_Procedure
73752>>>>>    
73752>>>>>    Procedure OnExecute Variant vCommandBarControl
73754>>>>>        Handle hoCommandBars hoClientArea
73754>>>>>        Get CommandBarSystemObject to hoCommandBars
73755>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73756>>>>>        If hoClientArea Begin
73758>>>>>            // the clientarea's parent panel has message
73758>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
73759>>>>>        End
73759>>>>>>
73759>>>>>    End_Procedure
73760>>>>>End_Class
73761>>>>>
73761>>>>>
73761>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
73762>>>>>    
73762>>>>>    Procedure Construct_Object
73764>>>>>        Forward Send Construct_Object
73766>>>>>        Set psCaption to C_$CaptionRestoreWindows
73767>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
73768>>>>>        Set psDescription to  C_$DescRestoreWindows
73769>>>>>        Set psCategory to C_$CategoryWindow
73770>>>>>    End_Procedure
73771>>>>>    
73771>>>>>    Procedure OnExecute Variant vCommandBarControl
73773>>>>>        Handle hoCommandBars hoClientArea
73773>>>>>        Get CommandBarSystemObject to hoCommandBars
73774>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73775>>>>>        If hoClientArea Begin
73777>>>>>            // the clientarea's parent panel has message
73777>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
73778>>>>>        End
73778>>>>>>
73778>>>>>    End_Procedure
73779>>>>>End_Class
73780>>>>>
73780>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
73781>>>>>    
73781>>>>>    Procedure Construct_Object
73783>>>>>        Forward Send Construct_Object
73785>>>>>        Set psCaption to C_$CaptionArrangeIcons
73786>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
73787>>>>>        Set psDescription to  C_$DescArrangeIcons
73788>>>>>        Set psCategory to C_$CategoryWindow
73789>>>>>    End_Procedure
73790>>>>>    
73790>>>>>    Procedure OnExecute Variant vCommandBarControl
73792>>>>>        Handle hoCommandBars hoClientArea
73792>>>>>        Get CommandBarSystemObject to hoCommandBars
73793>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73794>>>>>        If hoClientArea Begin
73796>>>>>            Send Arrange_Icons of hoClientArea
73797>>>>>        End
73797>>>>>>
73797>>>>>    End_Procedure
73798>>>>>    
73798>>>>>End_Class
73799>>>Use cCJAboutMenuItem.pkg
Including file: cCJAboutMenuItem.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJAboutMenuItem.pkg)
73799>>>>>Use cCJCommandBarSystem.pkg
73799>>>>>Use LanguageText.pkg
73799>>>>>
73799>>>>>// It is expected that if you use this class that you provide an about object that is
73799>>>>>// activated via activate_about such as DfAbout.pkg. We don't use this for you automatically
73799>>>>>// because you may wish to create your own custom about package.
73799>>>>>
73799>>>>>Class cCJAboutMenuItem is a cCJMenuItem    
73800>>>>>
73800>>>>>    Procedure Construct_Object
73802>>>>>        Forward Send Construct_Object
73804>>>>>        Set psCaption to C_$CaptionAbout
73805>>>>>        Set psDescription to C_$ToolTipAbout
73806>>>>>        Set psToolTip to C_$DescAbout
73807>>>>>        Set psImage to "ActionAbout.ico"
73808>>>>>        Set psCategory to C_$CategoryHelp
73809>>>>>    End_Procedure
73810>>>>>    
73810>>>>>    Procedure OnExecute Variant vCommandBarControl
73812>>>>>        Handle hoCommandBars hoClientArea
73812>>>>>        Get CommandBarSystemObject to hoCommandBars
73813>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
73814>>>>>        If hoClientArea Begin
73816>>>>>            Send Activate_About of hoClientArea
73817>>>>>        End
73817>>>>>>
73817>>>>>    End_Procedure
73818>>>>>
73818>>>>>End_Class
73819>>>>>
73819>>>>>
73819>>>Use cCJDeoMenuItemClasses.pkg
73819>>>Use cCJMDIWindowsMenuItem.pkg
Including file: cCJMDIWindowsMenuItem.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJMDIWindowsMenuItem.pkg)
73819>>>>>Use cCJCommandBarSystem.pkg
73819>>>>>
73819>>>>>Register_Function Client_ID Returns Integer
73819>>>>>
73819>>>>>// only used by cCJMDIWIndowsMenuItem
73819>>>>>Class cCJMDIWindowItem is a cCJMenuItem
73820>>>>>    
73820>>>>>    Procedure Construct_Object
73822>>>>>        Forward Send Construct_Object
73824>>>>>        Property Handle phWindow 0 // object id of view
73825>>>>>        Set pbControlFlagNoMovable to True
73826>>>>>        Set pbActiveUpdate to True
73827>>>>>    End_Procedure
73828>>>>>    
73828>>>>>    Procedure OnExecute Variant vCommandBarControl
73830>>>>>        Handle hWindow
73830>>>>>        Get phWindow to hWindow
73831>>>>>        Send Activate_View of hWindow
73832>>>>>    End_Procedure
73833>>>>>    
73833>>>>>End_Class
73834>>>>>
73834>>>>>
73834>>>>>Class cCJMDIWindowsMenuItem is a cCJMenuItem
73835>>>>>    
73835>>>>>    Procedure Construct_Object
73837>>>>>        Forward Send Construct_Object
73839>>>>>        Property Handle[] phArrayOfWindows
73840>>>>>        Set peControlType to xtpControlPopup
73841>>>>>        Set psCategory to C_$CategoryWindow
73842>>>>>    End_Procedure
73843>>>>>    
73843>>>>>    // This adds MDI windows to the existing menu items.
73843>>>>>    // This removes any existing windows menus and always adds a new set to the end
73843>>>>>    
73843>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hCommandBarControls
73845>>>>>        Handle  hClientArea hView
73845>>>>>        String  sLabel
73845>>>>>        Integer i iWindows
73845>>>>>        Handle[] hArrayOfWindows
73846>>>>>        Variant vItem
73846>>>>>        
73846>>>>>        // delete all windows actions and menu items. Assume we have an array of DF action objects for the windows
73846>>>>>        // also assume that destroying an action removes all menu instances of that action
73846>>>>>        Get phArrayOfWindows to hArrayOfWindows
73847>>>>>        Move (SizeOfArray(hArrayOfWindows)) to iWindows
73848>>>>>        For i from 0 to (iWindows-1)
73854>>>>>>
73854>>>>>            Send Destroy of hArrayOfWindows[i] // assume this removes all menu items of this action
73855>>>>>        Loop
73856>>>>>>
73856>>>>>        Move (ResizeArray(hArrayOfWindows,0)) to hArrayOfWindows
73857>>>>>        
73857>>>>>        // Add all views to this menu. Create the action and add the item
73857>>>>>        Move 0 to i
73858>>>>>        Get Client_Id to hClientArea // object id of client area
73859>>>>>        If (hClientArea > 0) Begin
73861>>>>>            Get Next_Mdi_Dialog of hClientArea True to hView // find first view
73862>>>>>            While (hView <> 0)
73866>>>>>                If (Active_State(hView)) Begin
73868>>>>>                    // create the action
73868>>>>>                    Get Create U_cCJMDIWindowItem to hArrayOfWindows[i]
73869>>>>>                    Get Label of hView to sLabel // caption bar (name) of view
73870>>>>>                    Set psCaption of hArrayOfWindows[i] to sLabel
73871>>>>>                    Set psDescription of hArrayOfWindows[i] to ("Make this view (" - trim(sLabel) - ") the active window.")
73872>>>>>                    If (current_scope(desktop)=hView and View_mode(hView)<>VIEWMODE_ICONIZE) Begin
73874>>>>>                        Set pbChecked of hArrayOfWindows[i] to True
73875>>>>>                    End
73875>>>>>>
73875>>>>>                    Set phWindow of hArrayOfWindows[i] to hView // used by custom OnExecute
73876>>>>>                    If (i=0) Begin
73878>>>>>                        Set pbControlBeginGroup of hArrayOfWindows[i] to True
73879>>>>>                    End
73879>>>>>>
73879>>>>>                    // Create a menu item for this action
73879>>>>>                    Get AddDynamicControl of hArrayOfWindows[i] hCommandBarControls to vItem
73880>>>>>                    Increment i
73881>>>>>                End
73881>>>>>>
73881>>>>>                Get Next_Mdi_Dialog of hClientArea False to hView // find next
73882>>>>>            Loop
73883>>>>>>
73883>>>>>        End
73883>>>>>>
73883>>>>>        
73883>>>>>        Set phArrayOfWindows to hArrayOfWindows
73884>>>>>        
73884>>>>>    End_Procedure
73885>>>>>    
73885>>>>>End_Class
73886>
73886>Object oHtmlHelp is a cHtmlHelp
73888>End_Object
73889>
73889>Object oApplication is a cApplication
73891>    Set peHelpType to htHtmlHelp
73892>
73892>    Object oConnection is a cConnection
73894>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\LoginEncryption.pkg)
73894>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cLoginEncryption.pkg)
73894>>>>>Use cCryptographerEx.pkg
Including file: cCryptographerEx.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCryptographerEx.pkg)
73894>>>>>>>Use VdfBase.pkg
73894>>>>>>>
73894>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files\DataFlex 24.0\Pkg\CryptographerConstants.pkg)
73894>>>>>>>>>//   Author  : Ulbe Stellema
73894>>>>>>>>>// Algorithm classes
73894>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
73894>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
73894>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
73894>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
73894>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
73894>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
73894>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
73894>>>>>>>>>
73894>>>>>>>>>// Algorithm types
73894>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
73894>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
73894>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
73894>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
73894>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
73894>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
73894>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
73894>>>>>>>>>
73894>>>>>>>>>// Generic sub-ids
73894>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
73894>>>>>>>>>
73894>>>>>>>>>// RSA sub-ids
73894>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
73894>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
73894>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
73894>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
73894>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
73894>>>>>>>>>
73894>>>>>>>>>// DSS sub-ids
73894>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
73894>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
73894>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
73894>>>>>>>>>
73894>>>>>>>>>// DES sub_ids
73894>>>>>>>>>Define ALG_SID_DES                      for 1
73894>>>>>>>>>Define ALG_SID_3DES                     for 3
73894>>>>>>>>>Define ALG_SID_DESX                     for 4
73894>>>>>>>>>Define ALG_SID_IDEA                     for 5
73894>>>>>>>>>Define ALG_SID_CAST                     for 6
73894>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
73894>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
73894>>>>>>>>>Define ALG_SID_3DES_112                 for 9
73894>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
73894>>>>>>>>>Define ALG_SID_RC5                      for 13
73894>>>>>>>>>Define ALG_SID_AES_128                  for 14
73894>>>>>>>>>Define ALG_SID_AES_192                  for 15
73894>>>>>>>>>Define ALG_SID_AES_256                  for 16
73894>>>>>>>>>Define ALG_SID_AES                      for 17
73894>>>>>>>>>
73894>>>>>>>>>// Fortezza sub-ids
73894>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
73894>>>>>>>>>Define ALG_SID_TEK                      for 11
73894>>>>>>>>>
73894>>>>>>>>>// RC2 sub-ids
73894>>>>>>>>>Define ALG_SID_RC2                      for 2
73894>>>>>>>>>
73894>>>>>>>>>// Stream cipher sub-ids
73894>>>>>>>>>Define ALG_SID_RC4                      for 1
73894>>>>>>>>>Define ALG_SID_SEAL                     for 2
73894>>>>>>>>>
73894>>>>>>>>>// Diffie-Hellman sub-ids
73894>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
73894>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
73894>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
73894>>>>>>>>>Define ALG_SID_KEA                      for 4
73894>>>>>>>>>
73894>>>>>>>>>// Hash sub ids
73894>>>>>>>>>Define ALG_SID_MD2                      for 1
73894>>>>>>>>>Define ALG_SID_MD4                      for 2
73894>>>>>>>>>Define ALG_SID_MD5                      for 3
73894>>>>>>>>>Define ALG_SID_SHA                      for 4
73894>>>>>>>>>Define ALG_SID_SHA1                     for 4
73894>>>>>>>>>Define ALG_SID_MAC                      for 5
73894>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
73894>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
73894>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
73894>>>>>>>>>Define ALG_SID_HMAC                     for 9
73894>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
73894>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
73894>>>>>>>>>Define ALG_SID_SHA_256                  for 12
73894>>>>>>>>>Define ALG_SID_SHA_384                  for 13
73894>>>>>>>>>Define ALG_SID_SHA_512                  for 14
73894>>>>>>>>>
73894>>>>>>>>>// secure channel sub ids
73894>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
73894>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
73894>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
73894>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
73894>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
73894>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
73894>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
73894>>>>>>>>>
73894>>>>>>>>>// algorithm identifier definitions
73894>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
73894>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
73894>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
73894>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
73894>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
73894>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
73894>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
73894>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
73894>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
73894>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
73894>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
73894>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
73894>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
73894>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
73894>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
73894>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
73894>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
73894>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
73894>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
73894>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
73894>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
73894>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
73894>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
73894>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
73894>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
73894>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
73894>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
73894>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
73894>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
73894>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
73894>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
73894>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
73894>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
73894>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
73894>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
73894>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
73894>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
73894>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
73894>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
73894>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
73894>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
73894>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
73894>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
73894>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
73894>>>>>>>>>
73894>>>>>>>>>// Providers
73894>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
73894>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
73894>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
73894>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
73894>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
73894>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
73894>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
73894>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
73894>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
73894>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
73894>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
73894>>>>>>>>>
73894>>>>>>>>>// dwFlags definitions for CryptAcquireContext
73894>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
73894>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
73894>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
73894>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
73894>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
73894>>>>>>>>>
73894>>>>>>>>>// dwFlag definitions for CryptGenKey
73894>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
73894>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
73894>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
73894>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
73894>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
73894>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
73894>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
73894>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
73894>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
73894>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
73894>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
73894>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
73894>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
73894>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
73894>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
73894>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
73894>>>>>>>>>
73894>>>>>>>>>// Provider types
73894>>>>>>>>>Define PROV_RSA_FULL                    for 1
73894>>>>>>>>>Define PROV_RSA_SIG                     for 2
73894>>>>>>>>>Define PROV_DSS                         for 3
73894>>>>>>>>>Define PROV_FORTEZZA                    for 4
73894>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
73894>>>>>>>>>Define PROV_SSL                         for 6
73894>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
73894>>>>>>>>>Define PROV_DSS_DH                      for 13
73894>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
73894>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
73894>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
73894>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
73894>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
73894>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
73894>>>>>>>>>Define PROV_RNG                         for 21
73894>>>>>>>>>Define PROV_INTEL_SEC                   for 22
73894>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
73894>>>>>>>>>Define PROV_RSA_AES                     for 24
73894>>>>>>>>>
73894>>>>>>>>>// KP_MODE
73894>>>>>>>>>// KP_MODE
73894>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
73894>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
73894>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
73894>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
73894>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
73894>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
73894>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
73894>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
73894>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
73894>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
73894>>>>>>>>>
73894>>>>>>>>>// dwParam definitions for CryptGetKeyParam
73894>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
73894>>>>>>>>>Define KP_SALT                          for 2       // Salt value
73894>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
73894>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
73894>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
73894>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
73894>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
73894>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
73894>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
73894>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
73894>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
73894>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
73894>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
73894>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
73894>>>>>>>>>Define KP_Y                             for 15      // Y value
73894>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
73894>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
73894>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
73894>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
73894>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
73894>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
73894>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
73894>>>>>>>>>Define KP_RP                            for 23
73894>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
73894>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
73894>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
73894>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
73894>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
73894>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
73894>>>>>>>>>Define KP_KEYVAL                        for 30
73894>>>>>>>>>Define KP_ADMIN_PIN                     for 31
73894>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
73894>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
73894>>>>>>>>>Define KP_PREHASH                       for 34
73894>>>>>>>>>Define KP_ROUNDS                        for 35
73894>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
73894>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
73894>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
73894>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
73894>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
73894>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
73894>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
73894>>>>>>>>>
73894>>>>>>>>>// dwParam definitions for CryptGetHashParam
73894>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
73894>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
73894>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
73894>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
73894>>>>>>>>>
73894>>>>>>>>>// key BLOB types
73894>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
73894>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
73894>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
73894>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
73894>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
73894>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
73894>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
73894>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
73894>>>>>>>>>
73894>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
73894>>>>>>>>>
73894>>>>>>>>>// KP_PADDING
73894>>>>>>>>>Define PKCS5_PADDING                    for 1       // PKCS 5 (sec 6.2) padding method
73894>>>>>>>>>Define RANDOM_PADDING                   for 2
73894>>>>>>>>>Define ZERO_PADDING                     for 3
73894>>>>>>>>>
73894>>>>>>>>>//  Structure cryptimportkey
73894>>>>>>>>>Struct PUBLICKEYSTRUC
73894>>>>>>>>>    UChar    bType
73894>>>>>>>>>    UChar    bVersion
73894>>>>>>>>>    UShort   reserved
73894>>>>>>>>>    UInteger aiKeyAlg
73894>>>>>>>>>End_Struct
73894>>>>>>>>>
73894>>>>>>>>>Struct tPLAINTEXTKEYBLOB
73894>>>>>>>>>    PUBLICKEYSTRUC hdr
73894>>>>>>>>>    PUBLICKEYSTRUC hdr
73894>>>>>>>>>    UInteger       dwKeySize
73894>>>>>>>>>//    UChar[]        rgbKeyData
73894>>>>>>>>>End_Struct
73894>>>>>>>>>
73894>>>>>>>>>
73894>>>>>>>>>
73894>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
73894>>>>>>>>>Struct HMAC_INFO
73894>>>>>>>>>    UInteger HashAlgid
73894>>>>>>>>>    Pointer pbInnerString
73894>>>>>>>>>    DWord cbInnerString
73894>>>>>>>>>    Pointer pbOuterString
73894>>>>>>>>>    DWord cbOuterString
73894>>>>>>>>>End_Struct
73894>>>>>>>>>
73894>>>>>>>>>Struct BLOBHEADER
73894>>>>>>>>>    UChar   bType
73894>>>>>>>>>    UChar   bVersion
73894>>>>>>>>>    Short   reserved
73894>>>>>>>>>    Integer aiKeyAlg
73894>>>>>>>>>End_Struct
73894>>>>>>>>>
73894>>>>>>>>>Struct CryptoBlob
73894>>>>>>>>>    BLOBHEADER  header
73894>>>>>>>>>    BLOBHEADER  header
73894>>>>>>>>>    Integer     cbKeySize
73894>>>>>>>>>    UChar[32]   rgbKeyData
73894>>>>>>>>>End_Struct
73894>>>>>>>>>
73894>>>>>>>>>
73894>>>>>>>>>// Note: lpContainer and lpProvider refer to WString types.
73894>>>>>>>>>External_Function CryptAcquireContextW "CryptAcquireContextW" advapi32.dll ;    Pointer phProv ;    Pointer lpContainer ;    Pointer lpProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
73895>>>>>>>>>
73895>>>>>>>>>// Compatibilty wrapper Function CryptAcquireContext
73895>>>>>>>>>Function CryptAcquireContext Global ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
73897>>>>>>>>>    
73897>>>>>>>>>    Boolean bResult
73897>>>>>>>>>    UWide   uwContainer uwProvider
73897>>>>>>>>>    UWide   uwContainer uwProvider
73897>>>>>>>>>
73897>>>>>>>>>    Send StringToWide szContainer (&uwContainer)
73898>>>>>>>>>    Send StringToWide szProvider (&uwProvider)
73899>>>>>>>>>    
73899>>>>>>>>>    Move (CryptAcquireContextW (phProv, uwContainer.lpUText, uwProvider.lpUText, dwProvType, dwFlags)) to bResult                   
73900>>>>>>>>>
73900>>>>>>>>>    Function_Return bResult
73901>>>>>>>>>End_Function
73902>>>>>>>>>
73902>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
73903>>>>>>>>>
73903>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
73904>>>>>>>>>
73904>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
73905>>>>>>>>>
73905>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
73906>>>>>>>>>
73906>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
73907>>>>>>>>>
73907>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
73908>>>>>>>>>
73908>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
73909>>>>>>>>>
73909>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
73910>>>>>>>>>
73910>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
73911>>>>>>>>>    
73911>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
73912>>>>>>>>>
73912>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
73913>>>>>>>>>
73913>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
73914>>>>>>>>>
73914>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
73915>>>>>>>>>    
73915>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
73916>>>>>>>>>    
73916>>>>>>>>>External_Function CryptGenKey "CryptGenKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
73917>>>>>>>>>    
73917>>>>>>>>>External_Function CryptExportKey "CryptExportKey" advapi32.dll ;    Handle hKey ;    Handle hExpKey ;    Integer dwBlobType ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
73918>>>>>>>
73918>>>>>>>Class cCryptographerEx is a cObject
73919>>>>>>>    
73919>>>>>>>    Procedure Construct_Object
73921>>>>>>>        Forward Send Construct_Object
73923>>>>>>>        
73923>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
73924>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
73925>>>>>>>        Property Integer    piCipher    CALG_RC4
73926>>>>>>>        Property Integer    piHash      CALG_MD5
73927>>>>>>>        
73927>>>>>>>        // Private properties
73927>>>>>>>        Property Handle     Private_phProv
73928>>>>>>>        
73928>>>>>>>        // Block cipher properties
73928>>>>>>>        Property UChar[]    paKey
73929>>>>>>>        Property UChar[]    paIV
73930>>>>>>>        Property Integer    piKeyAlg        PLAINTEXTKEYBLOB
73931>>>>>>>        Property Integer    piKeyType       CALG_AES_256
73932>>>>>>>        Property Integer    piKeyPadding    PKCS5_PADDING
73933>>>>>>>        Property Integer    piKeyMode       CRYPT_MODE_CBC
73934>>>>>>>        Property Integer    piBlockSize     16
73935>>>>>>>    End_Procedure
73936>>>>>>>    
73936>>>>>>>    
73936>>>>>>>    // Acquire key container handle
73936>>>>>>>    Function AcquireContext Returns Handle
73938>>>>>>>        Integer iProvider
73938>>>>>>>        WString wProvider
73938>>>>>>>        Handle hProv
73938>>>>>>>        Boolean bOk
73938>>>>>>>        Pointer pProv
73938>>>>>>>        
73938>>>>>>>        Move 0 to hProv
73939>>>>>>>        Get piProvider to iProvider
73940>>>>>>>        Get psProvider to wProvider
73941>>>>>>>        
73941>>>>>>>        //  Determine address to be passed as provider
73941>>>>>>>        If (Trim(wProvider) <> "") Begin
73943>>>>>>>            Move (AddressOf(wProvider)) to pProv
73944>>>>>>>        End
73944>>>>>>>>
73944>>>>>>>        Else Begin
73945>>>>>>>            Move 0 to pProv
73946>>>>>>>        End
73946>>>>>>>>
73946>>>>>>>        
73946>>>>>>>        //  Acquire Crypto Context. Note: pProv is pointer to UTF16 string.
73946>>>>>>>        Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
73947>>>>>>>        If (not(bOk) or hProv = 0) Begin
73949>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
73950>>>>>>>        End
73950>>>>>>>>
73950>>>>>>>        
73950>>>>>>>        If (not(bOk) or hProv = 0) Begin
73952>>>>>>>            // Fallback to original
73952>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,0)) to bOk
73953>>>>>>>            
73953>>>>>>>            If (not(bOk) or hProv = 0) Begin
73955>>>>>>>                Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET)) to bOk
73956>>>>>>>            End
73956>>>>>>>>
73956>>>>>>>        End
73956>>>>>>>>
73956>>>>>>>        Set Private_phProv to hProv
73957>>>>>>>        
73957>>>>>>>        Function_Return hProv
73958>>>>>>>    End_Function
73959>>>>>>>    
73959>>>>>>>    // Releases key container handle
73959>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
73961>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
73962>>>>>>>    End_Function
73963>>>>>>>    
73963>>>>>>>    // Creates hash object
73963>>>>>>>    Function CreateHash Handle hProv Returns Handle
73965>>>>>>>        Integer iAlgorithm
73965>>>>>>>        Handle hHash
73965>>>>>>>        Boolean bOk
73965>>>>>>>        
73965>>>>>>>        Move 0 to hHash
73966>>>>>>>        Get piHash to iAlgorithm
73967>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
73968>>>>>>>        
73968>>>>>>>        Function_Return hHash
73969>>>>>>>    End_Function
73970>>>>>>>    
73970>>>>>>>    // Destroys the hash object
73970>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
73972>>>>>>>        Function_Return (CryptDestroyHash(hHash))
73973>>>>>>>    End_Function
73974>>>>>>>    
73974>>>>>>>    // Adds data to hash object
73974>>>>>>>    Function HashData Handle hHash UChar[] ucData Returns Boolean
73976>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(ucData), SizeOfArray(ucData),0))
73977>>>>>>>    End_Function
73978>>>>>>>    
73978>>>>>>>    // Generates session key
73978>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
73980>>>>>>>        Integer iAlgorithm
73980>>>>>>>        Handle hKey
73980>>>>>>>        Boolean bOk
73980>>>>>>>        
73980>>>>>>>        Move 0 to hKey
73981>>>>>>>        Get piCipher to iAlgorithm
73982>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
73983>>>>>>>        
73983>>>>>>>        Function_Return hKey
73984>>>>>>>    End_Function
73985>>>>>>>    
73985>>>>>>>    // Imports a plain text key
73985>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
73987>>>>>>>        tPLAINTEXTKEYBLOB blobhead
73987>>>>>>>        tPLAINTEXTKEYBLOB blobhead
73987>>>>>>>        Boolean   bSuccess
73987>>>>>>>        Handle    hKey
73987>>>>>>>        Integer   iHeadSize iKeySize
73987>>>>>>>        UChar[]   ucaKeyblob
73988>>>>>>>        Integer iVoid
73988>>>>>>>        
73988>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
73989>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
73990>>>>>>>        
73990>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
73991>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
73992>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
73993>>>>>>>        Move iKeySize           to blobhead.dwKeySize
73994>>>>>>>        
73994>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
73995>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
73996>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
73997>>>>>>>        
73997>>>>>>>        Move 0 to hKey
73998>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
73999>>>>>>>        If (not(bSuccess)) Begin
74001>>>>>>>            Move (ShowLastError()) to iVoid
74002>>>>>>>        End
74002>>>>>>>>
74002>>>>>>>        
74002>>>>>>>        Function_Return hKey
74003>>>>>>>    End_Function
74004>>>>>>>    
74004>>>>>>>    // Destroys the key
74004>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
74006>>>>>>>        Function_Return (CryptDestroyKey(hKey))
74007>>>>>>>    End_Function
74008>>>>>>>    
74008>>>>>>>    // Retrieves key data
74008>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
74010>>>>>>>        Integer iBuffer iLen
74010>>>>>>>        Boolean bOk
74010>>>>>>>        
74010>>>>>>>        Move (SizeOfType(Integer)) to iLen
74011>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
74012>>>>>>>        Function_Return iBuffer
74013>>>>>>>    End_Function
74014>>>>>>>    
74014>>>>>>>    // Retrieves a hash value
74014>>>>>>>    Function HashValue Handle lhHash Returns UChar[]
74016>>>>>>>        UChar[] ucHash
74017>>>>>>>        Integer liResult
74017>>>>>>>        DWord   dwDataLen
74017>>>>>>>        
74017>>>>>>>        Move 0 to dwDataLen
74018>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
74019>>>>>>>        If (liResult = 0) ;            Function_Return ""
74022>>>>>>>        
74022>>>>>>>        Move (ResizeArray(ucHash, dwDataLen, 0)) to ucHash
74023>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(ucHash),AddressOf(dwDataLen),0)) to liResult
74024>>>>>>>        If (liResult = 0) ;            Function_Return ""
74027>>>>>>>        
74027>>>>>>>        Function_Return ucHash
74028>>>>>>>    End_Function
74029>>>>>>>
74029>>>>>>>    // Encrypts data
74029>>>>>>>    Function Encrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
74031>>>>>>>        Handle hProv hHash hKey
74031>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
74031>>>>>>>        Boolean bOk
74031>>>>>>>        
74031>>>>>>>        Get AcquireContext to hProv
74032>>>>>>>        If (hProv) Begin
74034>>>>>>>            Get CreateHash hProv to hHash
74035>>>>>>>            If (hHash) Begin
74037>>>>>>>                Get HashData hHash ucPassword to bOk
74038>>>>>>>                If (bOk) Begin
74040>>>>>>>                    Get piCipher to iAlgorithm
74041>>>>>>>                    Get DeriveKey hProv hHash to hKey
74042>>>>>>>                End
74042>>>>>>>>
74042>>>>>>>                Get DestroyHash hHash to bOk
74043>>>>>>>            End
74043>>>>>>>>
74043>>>>>>>            
74043>>>>>>>            If (hKey) Begin
74045>>>>>>>                //  First call to determine resulting data size
74045>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
74046>>>>>>>                Move (SizeOfArray(ucData)) to iCipherLen
74047>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
74048>>>>>>>                
74048>>>>>>>                //  Reserve space in string
74048>>>>>>>                If (iDataLen < iCipherLen) Begin
74050>>>>>>>                    Move (ResizeArray(ucData, iCipherLen, 0)) to ucData
74051>>>>>>>                End
74051>>>>>>>>
74051>>>>>>>                
74051>>>>>>>                //  Call to really decrypt
74051>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen),SizeOfArray(ucData))) to bOk
74052>>>>>>>                //If (not(bOk)) Begin
74052>>>>>>>                //Move "" to sData
74052>>>>>>>                //Move (GetLastError()) to iErr
74052>>>>>>>                //End
74052>>>>>>>                
74052>>>>>>>                Get DestroyKey hKey to bOk
74053>>>>>>>            End 
74053>>>>>>>>
74053>>>>>>>            Get ReleaseContext hProv to bOk
74054>>>>>>>        End 
74054>>>>>>>>
74054>>>>>>>        Function_Return ucData
74055>>>>>>>    End_Function
74056>>>>>>>    
74056>>>>>>>    // Decrypts data
74056>>>>>>>    Function Decrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
74058>>>>>>>        Handle hProv hHash hKey
74058>>>>>>>        Integer iAlgorithm iDataLen
74058>>>>>>>        Boolean bOk
74058>>>>>>>        
74058>>>>>>>        Get AcquireContext to hProv
74059>>>>>>>        If (hProv) Begin
74061>>>>>>>            Get CreateHash hProv to hHash
74062>>>>>>>            If (hHash) Begin
74064>>>>>>>                Get HashData hHash ucPassword to bOk
74065>>>>>>>                If (bOk) Begin
74067>>>>>>>                    Get piCipher to iAlgorithm
74068>>>>>>>                    Get DeriveKey hProv hHash to hKey
74069>>>>>>>                End
74069>>>>>>>>
74069>>>>>>>                Get DestroyHash hHash to bOk
74070>>>>>>>            End
74070>>>>>>>>
74070>>>>>>>            
74070>>>>>>>            If (hKey) Begin
74072>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
74073>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen))) to bOk
74074>>>>>>>                //  Resulting data can be shorter as the input string, in that case we shorten the result string
74074>>>>>>>                If (SizeOfArray (ucData) > iDataLen) Begin
74076>>>>>>>                    Move (ResizeArray(ucData, iDataLen)) to ucData
74077>>>>>>>                End
74077>>>>>>>>
74077>>>>>>>                
74077>>>>>>>                Get DestroyKey hKey to bOk
74078>>>>>>>            End
74078>>>>>>>>
74078>>>>>>>            Get ReleaseContext hProv to bOk
74079>>>>>>>        End
74079>>>>>>>>
74079>>>>>>>        Function_Return ucData
74080>>>>>>>    End_Function
74081>>>>>>>    
74081>>>>>>>    // Creates a key
74081>>>>>>>    Function CreateKey Handle hProv Returns Handle
74083>>>>>>>        Integer iAlg iType iByte iLength iSize
74083>>>>>>>        CryptoBlob keyBlob
74083>>>>>>>        CryptoBlob keyBlob
74083>>>>>>>        Boolean bOk
74083>>>>>>>        Handle hKey
74083>>>>>>>        UChar[] aKey
74084>>>>>>>
74084>>>>>>>        Get paKey to aKey
74085>>>>>>>        Get piKeyAlg to iAlg
74086>>>>>>>        Get piKeyType to iType
74087>>>>>>>        Move iAlg                   to keyBlob.header.bType
74088>>>>>>>        Move CUR_BLOB_VERSION       to keyBlob.header.bVersion
74089>>>>>>>        Move iType                  to keyBlob.header.aiKeyAlg
74090>>>>>>>        Move (SizeOfArray(aKey))    to keyBlob.cbKeySize
74091>>>>>>>        
74091>>>>>>>        Move (SizeOfArray(aKey)-1) to iLength
74092>>>>>>>        For iByte from 0 to iLength
74098>>>>>>>>
74098>>>>>>>            Move aKey[iByte] to keyBlob.rgbKeyData[iByte]
74099>>>>>>>        Loop
74100>>>>>>>>
74100>>>>>>>        
74100>>>>>>>        Move 0 to hKey
74101>>>>>>>        Move (CryptImportKey(hProv,AddressOf(keyBlob),SizeOfType(CryptoBlob),0,0,AddressOf(hKey))) to bOk
74102>>>>>>>        Function_Return hKey
74103>>>>>>>    End_Function
74104>>>>>>>    
74104>>>>>>>    // Sets the key parameters
74104>>>>>>>    Function SetKeyParameters Handle hKey Returns Boolean
74106>>>>>>>        Integer iPadding iMode
74106>>>>>>>        Boolean bOk
74106>>>>>>>        UChar[] aIV
74107>>>>>>>        
74107>>>>>>>        //Move (SizeOfArray(aIV)-1) to iLength
74107>>>>>>>        //For iByte from 0 to iLength
74107>>>>>>>        //    Move iByte to aIV[iByte]
74107>>>>>>>        //Loop
74107>>>>>>>
74107>>>>>>>        // Set initialization vector
74107>>>>>>>        Get paIV to aIV
74108>>>>>>>        Move (CryptSetKeyParam(hKey,KP_IV,AddressOf(aIV),0)) to bOk
74109>>>>>>>        If (bOk) Begin
74111>>>>>>>            // Set padding
74111>>>>>>>            Get piKeyPadding to iPadding
74112>>>>>>>            Move (CryptSetKeyParam(hKey,KP_PADDING,AddressOf(iPadding),0)) to bOk
74113>>>>>>>            If (bOk) Begin
74115>>>>>>>                // Set move
74115>>>>>>>                Get piKeyMode to iMode
74116>>>>>>>                Move (CryptSetKeyParam(hKey,KP_MODE,AddressOf(iMode),0)) to bOk
74117>>>>>>>            End
74117>>>>>>>>
74117>>>>>>>        End
74117>>>>>>>>
74117>>>>>>>        Function_Return bOk        
74118>>>>>>>    End_Function
74119>>>>>>>    
74119>>>>>>>    // Encrypts using block cipher
74119>>>>>>>    Function BlockEncrypt UChar[] ucData Returns UChar[]
74121>>>>>>>        Handle hProv hKey
74121>>>>>>>        Integer iLen iSize iBlocks
74121>>>>>>>        Boolean bOk
74121>>>>>>>        
74121>>>>>>>        Get AcquireContext to hProv
74122>>>>>>>        If (hProv) Begin
74124>>>>>>>            // Create key
74124>>>>>>>            Get CreateKey hProv to hKey
74125>>>>>>>            If (hKey) Begin
74127>>>>>>>                Get SetKeyParameters hKey to bOk
74128>>>>>>>                If (bOk) Begin
74130>>>>>>>                    // Buffer for block ciphers can be up to block length larger
74130>>>>>>>                    Get piBlockSize to iSize
74131>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
74132>>>>>>>                    
74132>>>>>>>                    Move ((iLen/iSize)+1) to iBlocks
74133>>>>>>>                    Move (ResizeArray(ucData,iBlocks*iSize)) to ucData
74134>>>>>>>                    Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen),SizeOfArray(ucData))) to bOk
74135>>>>>>>                End
74135>>>>>>>>
74135>>>>>>>                Get DestroyKey hKey to bOk
74136>>>>>>>            End
74136>>>>>>>>
74136>>>>>>>            Get ReleaseContext hProv to bOk
74137>>>>>>>        End
74137>>>>>>>>
74137>>>>>>>        Function_Return ucData
74138>>>>>>>    End_Function
74139>>>>>>>    
74139>>>>>>>    // Decrypts using block cipher
74139>>>>>>>    Function BlockDecrypt UChar[] ucData Returns UChar[]
74141>>>>>>>        Handle hProv hKey
74141>>>>>>>        Integer iLen
74141>>>>>>>        Boolean bOk
74141>>>>>>>        
74141>>>>>>>        Get AcquireContext to hProv
74142>>>>>>>        If (hProv) Begin
74144>>>>>>>            // Create key
74144>>>>>>>            Get CreateKey hProv to hKey
74145>>>>>>>            If (hKey) Begin
74147>>>>>>>                Get SetKeyParameters hKey to bOk
74148>>>>>>>                If (bOk) Begin
74150>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
74151>>>>>>>                    Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen))) to bOk
74152>>>>>>>                    Move (ResizeArray(ucData,iLen)) to ucData
74153>>>>>>>                End
74153>>>>>>>>
74153>>>>>>>                Get DestroyKey hKey to bOk
74154>>>>>>>            End
74154>>>>>>>>
74154>>>>>>>            Get ReleaseContext hProv to bOk
74155>>>>>>>        End
74155>>>>>>>>
74155>>>>>>>        Function_Return ucData
74156>>>>>>>    End_Function
74157>>>>>>>    
74157>>>>>>>    
74157>>>>>>>    //  Generates random data.
74157>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
74159>>>>>>>        Handle hProv
74159>>>>>>>        UChar[] uaResult
74160>>>>>>>        Boolean bRes
74160>>>>>>>        
74160>>>>>>>        Get AcquireContext to hProv
74161>>>>>>>        
74161>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
74162>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
74163>>>>>>>        
74163>>>>>>>        Get ReleaseContext hProv to bRes
74164>>>>>>>        
74164>>>>>>>        Function_Return uaResult
74165>>>>>>>    End_Function
74166>>>>>>>    
74166>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
74166>>>>>>>    Function GenerateRandomString Integer iLength Returns String
74168>>>>>>>        String sResult
74168>>>>>>>        UChar[] ucData
74169>>>>>>>        Pointer pBase64
74169>>>>>>>        Integer iVoid
74169>>>>>>>        
74169>>>>>>>        Get GenerateRandom iLength to ucData
74170>>>>>>>        
74170>>>>>>>        Move (Base64Encode(AddressOf(ucData), iLength)) to pBase64
74171>>>>>>>        Move (PointerToString(pBase64)) to sResult
74172>>>>>>>        Move (Free(pBase64)) to iVoid
74173>>>>>>>        
74173>>>>>>>        Function_Return (Left(sResult, iLength))
74174>>>>>>>    End_Function
74175>>>>>>>    
74175>>>>>>>End_Class
74176>>>>>
74176>>>>>Class cLoginEncryption is a cObject
74177>>>>>    
74177>>>>>    Procedure Construct_Object
74179>>>>>        Forward Send Construct_Object
74181>>>>>        // this must be set to a multi (40ish) character random key
74181>>>>>        Property String psEncryptPassword ""
74182>>>>>        
74182>>>>>        Object oDataCrypter is a cCryptographerEx
74184>>>>>            Set piHash to CALG_SHA_256
74185>>>>>            Set piCipher to CALG_AES_256
74186>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
74187>>>>>            Set piProvider to PROV_RSA_AES
74188>>>>>        End_Object
74189>>>>>    End_Procedure
74190>>>>>    
74190>>>>>    // This can be augmented to return a password encryption key using any
74190>>>>>    // hidden mechanism desired.
74190>>>>>    Function GetEncryptionPassword Returns String
74192>>>>>        String sPassword
74192>>>>>        Get psEncryptPassword to sPassword
74193>>>>>        Function_Return sPassword
74194>>>>>    End_Function
74195>>>>>    
74195>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
74195>>>>>    //
74195>>>>>    // Params:
74195>>>>>    //   sPlainText     String to encrypt.
74195>>>>>    // Returns:
74195>>>>>    //   Base64 encoded hash.
74195>>>>>    Function EncryptPassword String sPlainText Returns String
74197>>>>>        String sEncryptPassword sBase64
74197>>>>>        UChar[] ucBinary
74198>>>>>        Pointer pBase64
74198>>>>>        Integer iVoid
74198>>>>>        
74198>>>>>        //  Encrypt Key
74198>>>>>        Get GetEncryptionPassword to sEncryptPassword
74199>>>>>        If (sEncryptPassword = "") Begin
74201>>>>>            Error DFERR_PROGRAM "No encryption password set"
74202>>>>>>
74202>>>>>        End
74202>>>>>>
74202>>>>>        
74202>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
74203>>>>>        
74203>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
74205>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
74206>>>>>>
74206>>>>>            Function_Return ""
74207>>>>>        End
74207>>>>>>
74207>>>>>        
74207>>>>>        //  Encode binary hash to Base64
74207>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
74208>>>>>        Move (PointerToString(pBase64)) to sBase64
74209>>>>>        Move (Free(pBase64)) to iVoid
74210>>>>>        
74210>>>>>        Function_Return sBase64
74211>>>>>    End_Function
74212>>>>>    
74212>>>>>    
74212>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
74212>>>>>    //
74212>>>>>    // Params:
74212>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
74212>>>>>    // Returns:
74212>>>>>    //   Readable plain text password
74212>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
74214>>>>>        String sEncryptPassword
74214>>>>>        UChar[] ucBinary ucPlain
74216>>>>>        Boolean bIsHex
74216>>>>>        Integer iLen iVoid
74216>>>>>        Pointer pBinary
74216>>>>>        
74216>>>>>        If (sBase64EncryptedPassword <> "") Begin
74218>>>>>            //  Decode from Base64
74218>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
74219>>>>>            
74219>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
74220>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
74221>>>>>                        
74221>>>>>            Move (Free(pBinary)) to iVoid
74222>>>>>            
74222>>>>>            //  Encrypted binary hash to string
74222>>>>>            Get GetEncryptionPassword to sEncryptPassword
74223>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
74224>>>>>        End
74224>>>>>>
74224>>>>>        
74224>>>>>        Function_Return (UCharArrayToString(ucPlain))
74225>>>>>    End_Function
74226>>>>>End_Class
74227>>>
74227>>>Object oLoginEncryption is a cLoginEncryption
74229>>>
74229>>>    // this must be created in your appsrc directory and must contain an encryption
74229>>>    // key that is set to psEncryptPassword. It will look something like this
74229>>>    //
74229>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
74229>>>    //  
Including file: LoginEncryptionKey.inc    (D:\Downloads\ValidacionEmail\AppSrc\LoginEncryptionKey.inc)
74229>>>>// Studio generated login encryption key
74229>>>>Set psEncryptPassword to ".y.@?<hjecbLsTLj3X0\7pRoY@NM##}#X#H3-%lb"
74230>>>>
74230>>>    
74230>>>    // use this to register this object to your cConnection Object. This object
74230>>>    // must be created after the cConnection object
74230>>>    Move Self to ghoLoginEncryption
74231>>>End_Object
74232>        Use DatabaseLoginDialog.dg
Including file: DatabaseLoginDialog.dg    (C:\Program Files\DataFlex 24.0\Pkg\DatabaseLoginDialog.dg)
74232>>>
74232>>>Use Windows.pkg
74232>>>Use cConnection.pkg
74232>>>Use dfLine.pkg
74232>>>
74232>>>Object oDatabaseLoginDialog is a ModalPanel
74234>>>    Set Label to "Database Login"
74235>>>    Set Location to 2 2
74236>>>    Set Size to 110 211
74237>>>    
74237>>>    Property String psId
74239>>>    Property Boolean pbOk False
74241>>>    Property Boolean pbChanged False
74243>>>    Property Boolean pbAllowRemember True
74245>>>    
74245>>>    // this registers this object with the cConnection object.
74245>>>    Move Self to ghoLoginConnectDialog
74246>>>    
74246>>>    Object oUserIDForm is a Form
74248>>>        Set Label to "User Name"
74249>>>        Set Size to 12 85
74250>>>        Set Location to 34 79
74251>>>        Set Label_Col_Offset to 64
74252>>>        Set peAnchors to anTopLeftRight
74253>>>    End_Object
74254>>>    
74254>>>    Object oPwdForm is a Form
74256>>>        Set Size to 12 85
74257>>>        Set Location to 49 79
74258>>>        Set Label_Col_Offset to 64
74259>>>        Set Password_State to True
74260>>>        Set peAnchors to anTopLeftRight
74261>>>        Set Label to "Password"
74262>>>    End_Object
74263>>>    
74263>>>    Object oTrustedConnection is a CheckBox
74265>>>        Set Size to 10 50
74266>>>        Set Location to 65 79
74267>>>        Set Label to "Trusted Connection"
74268>>>    End_Object
74269>>>    
74269>>>    Object oRemember is a CheckBox
74271>>>        Set Size to 10 50
74272>>>        Set Location to 79 14
74273>>>        Set Label to "Remember and don't ask again"
74274>>>        Set Checked_State to True
74275>>>    End_Object
74276>>>    
74276>>>    Object oLogin_btn is a Button
74278>>>        Set Label to "&Login"
74279>>>        Set Location to 92 102
74280>>>        Set peAnchors to anBottomRight
74281>>>        Set Default_State to True
74282>>>        
74282>>>        Procedure OnClick
74285>>>            Boolean bTrust
74285>>>            String sUser sPwd sConn sErr sId
74285>>>            Integer iError
74285>>>            Get psId to sId
74286>>>            Get Value of oUserIDForm to sUser
74287>>>            Get Value of oPwdForm to sPwd
74288>>>            Get Checked_State of oTrustedConnection to bTrust
74289>>>            
74289>>>            Get LoginConnectIdNewCredentials of ghoConnection sId sUser sPwd bTrust to iError
74290>>>            If (iError=0) Begin
74292>>>                Set pbOk to True
74293>>>                Set pbChanged to True
74294>>>                Send Close_Panel
74295>>>            End
74295>>>>
74295>>>            Else Begin
74296>>>                Get psErrorText of ghoConnection to sErr
74297>>>                Send UserError sErr "Login Error"
74298>>>            End
74298>>>>
74298>>>        End_Procedure
74299>>>    End_Object
74300>>>    
74300>>>    Object oCancel_btn is a Button
74302>>>        Set Label to "&Cancel"
74303>>>        Set Location to 92 157
74304>>>        Set peAnchors to anBottomRight
74305>>>        
74305>>>        Procedure OnClick
74308>>>            Send Close_Panel
74309>>>        End_Procedure
74310>>>    End_Object
74311>>>    
74311>>>    Object oConnectionIdInfo is a TextBox
74313>>>        Set Size to 10 50
74314>>>        Set Location to 4 14
74315>>>        Set Label to 'Connection Id='
74316>>>    End_Object
74317>>>    
74317>>>    Object oConnectionServerInfo is a TextBox
74319>>>        Set Size to 10 50
74320>>>        Set Location to 16 14
74321>>>        Set Label to 'Server'
74322>>>    End_Object
74323>>>    
74323>>>    Object oLineControl1 is a LineControl
74325>>>        Set Size to 2 202
74326>>>        Set Location to 29 5
74327>>>    End_Object
74328>>>    
74328>>>    Function LoginConnectIdDialog String sId Returns Boolean
74331>>>        Boolean bOk bChanged bTrusted bAllowRemember bRemember
74331>>>        String sUser sPwd sDescription
74331>>>        tConnection Connect
74331>>>        tConnection Connect
74331>>>        
74331>>>        Get pbAllowRemember to bAllowRemember
74332>>>        
74332>>>        
74332>>>        If not bAllowRemember Begin
74334>>>            Set Enabled_State of oRemember to bRemember
74335>>>            Set Visible_State of oRemember to bRemember
74336>>>        End
74336>>>>
74336>>>        
74336>>>        Get ConnectionIdInfo of ghoConnection sId to Connect
74337>>>        Set Value of oConnectionIdInfo to ("Connection ID="+Connect.sId)
74338>>>        Set Value of oConnectionServerInfo to Connect.sString
74339>>>        
74339>>>        Set psId to sId
74340>>>        Set pbOk to False
74341>>>        Set pbChanged to False
74342>>>        Set Value of oUserIDForm to Connect.sUID
74343>>>        Set Value of oPwdForm to ""
74344>>>        
74344>>>        Send Popup
74345>>>        
74345>>>        Get pbOk to bOk
74346>>>        Get pbChanged to bChanged
74347>>>        If (bChanged and bOk) Begin
74349>>>            If bAllowRemember Begin
74351>>>                Get Checked_State of oRemember to bRemember
74352>>>                If bRemember Begin
74354>>>                    Get Checked_State of oTrustedConnection to bTrusted
74355>>>                    If not (bTrusted) Begin
74357>>>                        Get Value of oUserIDForm to sUser
74358>>>                        Get Value of oPwdForm to sPwd
74359>>>                    End
74359>>>>
74359>>>                    Get StoreConnectionIdCredentials of ghoConnection sId sUser sPwd bTrusted to bOk
74360>>>                End
74360>>>>
74360>>>            End
74360>>>>
74360>>>        End
74360>>>>
74360>>>        Function_Return bOk
74361>>>    End_Function
74362>>>    
74362>>>    
74362>>>    On_Key Key_Alt+Key_O Send KeyAction of oLogin_btn
74363>>>    On_Key Key_Alt+Key_L Send KeyAction of oCancel_btn
74364>>>End_Object
74365>>>
74365>    End_Object
74366>
74366>End_Object
74367>
74367>Object oToolTipController is a cToolTipController
74369>    Move Self to ghoToolTipController
74370>End_Object
74371>
74371>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 24.0\Pkg\oEditContextMenu.pkg)
74371>>>Use cCJStandardMenuItemClasses.pkg
74371>>>
74371>>>Object oEditContextMenu is a cCJContextMenu
74373>>>    
74373>>>    Move Self to Default_Form_Floating_Menu_ID
74374>>>    
74374>>>    Object oUndoMenuItem is a cCJUndoMenuItem
74376>>>    End_Object
74377>>>    
74377>>>    Object oCutMenuItem is a cCJCutMenuItem
74379>>>        Set pbControlBeginGroup to True
74380>>>    End_Object
74381>>>    
74381>>>    Object oCopyMenuItem is a cCJCopyMenuItem
74383>>>    End_Object
74384>>>
74384>>>    Object oPasteMenuItem is a cCJPasteMenuItem
74386>>>    End_Object
74387>>>
74387>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
74389>>>    End_Object
74390>>>
74390>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
74392>>>        Set pbControlBeginGroup to True
74393>>>    End_Object
74394>>>
74394>>>End_Object
74395>>>
74395>Use oDEOEditContextMenu17.pkg
Including file: oDEOEditContextMenu17.pkg    (C:\Program Files\DataFlex 24.0\Pkg\oDEOEditContextMenu17.pkg)
74395>>>Use Windows.pkg
74395>>>Use cCJStandardMenuItemClasses.pkg
74395>>>Use cCJDeoMenuItemClasses.pkg
74395>>>
74395>>>
74395>>>Object oDEOEditContextMenu17 is a cCJContextMenu
74397>>>    
74397>>>    Move Self to Default_dbFloating_Menu_ID
74398>>>    
74398>>>    Object oUndoMenuItem is a cCJUndoMenuItem
74400>>>    End_Object
74401>>>    
74401>>>    Object oCutMenuItem is a cCJCutMenuItem
74403>>>        Set pbControlBeginGroup to True
74404>>>    End_Object
74405>>>    
74405>>>    Object oCopyMenuItem is a cCJCopyMenuItem
74407>>>    End_Object
74408>>>
74408>>>    Object oPasteMenuItem is a cCJPasteMenuItem
74410>>>    End_Object
74411>>>
74411>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
74413>>>    End_Object
74414>>>
74414>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
74416>>>        Set pbControlBeginGroup to True
74417>>>    End_Object
74418>>>
74418>>>    Object oPromptMenuItem is a cCJPromptMenuItem
74420>>>        Set pbControlBeginGroup to True
74421>>>    End_Object
74422>>>
74422>>>    Object oFindNextMenu is a cCJFindNextMenuItem
74424>>>        Set pbControlBeginGroup to True
74425>>>    End_Object
74426>>>
74426>>>    Object oFindPreviousMenu is a cCJFindPreviousMenuItem
74428>>>    End_Object
74429>>>
74429>>>    Object oClearMenuItem is a cCJClearMenuItem
74431>>>        Set pbControlBeginGroup to True
74432>>>    End_Object
74433>>>
74433>>>    Object oClearAllMenu is a cCJClearAllMenuItem
74435>>>    End_Object
74436>>>
74436>>>    Object oSaveMenu is a cCJSaveMenuItem
74438>>>    End_Object
74439>>>    
74439>>>    Object oDeleteMenu is a cCJDeleteMenuItem
74441>>>    End_Object
74442>>>
74442>>>    Object oRememberitem is a cCJRememberFieldMenuItem
74444>>>        Set pbControlBeginGroup to True
74445>>>    End_Object
74446>>>
74446>>>    Object oRetainItem is a cCJRememberLastFieldMenuItem
74448>>>    End_Object
74449>>>
74449>>>    Object oUnRememberitem is a cCJUnRememberFieldMenuItem
74451>>>    End_Object
74452>>>
74452>>>    Object oCJClearAllDynamicDefaults is a cCJUnRememberFieldAllMenuItem
74454>>>    End_Object
74455>>>
74455>>>End_Object
74456>
74456>Object oMain is a Panel
74458>    Set Label to "Mi Proyecto"
74459>    Set Location to 4 3
74460>    Set Size to 300 450
74461>
74461>    Object oCommandBarSystem is a cCJCommandBarSystem
74463>        Set pbTimerUpdate to True
74464>        Set peVisualTheme to xtpThemeOffice2013Outlook
74465>        Set pbAutoResizeIcons to True
74466>
74466>        Procedure OnCreateCommandBars
74469>            Handle hoOptions
74469>            Get OptionsObject to hoOptions
74470>            Forward Send OnCreateCommandBars
74472>        End_Procedure
74473>
74473>        Object oMenuBar is a cCJMenuBar
74475>
74475>            Object oFileMenu is a cCJMenuItem
74477>                Set peControlType to xtpControlPopup          
74478>                Set psCaption   to "Archivo"    // &F   <--------------------------
74479>                Set psDescription to "Buscar, Grabar, Borrar, limpiar información o salir de esta aplicación."
74480>                Set psCategory to "Menús"
74481>
74481>                Object oClearMenuItem is a cCJClearMenuItem
74483>                    Set pbAddToDesignerMenu to True
74484>                End_Object
74485>
74485>                Object oClearAllMenu is a cCJClearAllMenuItem
74487>                    Set pbAddToDesignerMenu to True
74488>                End_Object
74489>
74489>                Object oPromptMenuItem is a cCJPromptMenuItem
74491>                    Set pbAddToDesignerMenu to True
74492>                    Set pbControlBeginGroup to True
74493>                End_Object
74494>
74494>                Object oFindMenuItem is a cCJFindMenuItem
74496>                    Set pbAddToDesignerMenu to True
74497>                    Set pbControlBeginGroup to True
74498>                End_Object
74499>
74499>                Object oFindNextMenu is a cCJFindNextMenuItem
74501>                    Set pbAddToDesignerMenu to True
74502>                End_Object
74503>
74503>                Object oFindPreviousMenu is a cCJFindPreviousMenuItem
74505>                    Set pbAddToDesignerMenu to True
74506>                End_Object
74507>
74507>                Object oFindFirstMenu is a cCJFindFirstMenuItem
74509>                    Set pbAddToDesignerMenu to True
74510>                End_Object
74511>
74511>                Object oFindLastMenu is a cCJFindLastMenuItem
74513>                    Set pbAddToDesignerMenu to True
74514>                End_Object
74515>
74515>                Object oSaveMenuItem is a cCJSaveMenuItem
74517>                    Set pbAddToDesignerMenu to True
74518>                    Set pbControlBeginGroup to True
74519>                End_Object
74520>
74520>                Object oDeleteMenuItem is a cCJDeleteMenuItem
74522>                    Set pbAddToDesignerMenu to True
74523>                End_Object
74524>
74524>                Object oExitMenu is a cCJExitMenuItem
74526>                    Set pbControlBeginGroup to True
74527>                End_Object
74528>
74528>            End_Object
74529>
74529>            Object oViewMenu is a cCJMenuItem
74531>                Set peControlType to xtpControlPopup
74532>                Set psCaption to "&Vistas"
74533>                Set psToolTip to "Vistas"
74534>               Set psDescription to "Vistas disponibles"
74535>
74535>               Object oValidacionEmailMenuItem is a cCJMenuItem
74537>                   Set psCaption to "ValidacionEmail"
74538>                   Set psTooltip to "ValidacionEmail"
74539>               
74539>                   Procedure OnExecute Variant vCommandBarControl
74542>                       Handle hoClient
74542>                       Get Client_Id to hoClient
74543>                       Send Activate_oValidacionEmail of hoClient
74544>                   End_Procedure
74545>               End_Object
74546>            End_Object
74547>            
74547>            Object oReportMenu is a cCJMenuItem
74549>                Set peControlType to xtpControlPopup          
74550>                Set psCaption to "&Informes"
74551>                Set psToolTip to "Informes"
74552>                Set psDescription to "Informes disponibles"
74553>            End_Object
74554>
74554>            Object oNavigateMenu is a cCJMenuItem
74556>                Set peControlType to xtpControlPopup      
74557>                Set psCaption to "&Navegar"    
74558>                Set psTooltip to "Navegar"    
74559>                Set psDescription to "Desplazarse a diferentes areas de la aplicación"
74560>
74560>                Object oNextAreaMenu is a cCJNextAreaMenu
74562>                End_Object
74563>
74563>                Object oPriorAreaMenu is a cCJPriorAreaMenu
74565>                End_Object
74566>
74566>                Object oNextViewMenu is a cCJNextViewMenu
74568>                End_Object
74569>
74569>                Object oPriorViewMenu is a cCJPriorViewMenu
74571>                End_Object
74572>
74572>                Object oPromptMenu is a cCJPromptMenuItem
74574>                    Set pbControlBeginGroup to True
74575>                End_Object
74576>
74576>                Object oZoomMenu is a cCJZoomMenuItem
74578>                End_Object
74579>
74579>            End_Object
74580>
74580>            Object oWindowMenu is a cCJMDIWindowsMenuItem
74582>                Set peControlType to xtpControlPopup
74583>                Set psCaption to "Ventana"      // &W <---------------
74584>                Set psToolTip to "Ventana"
74585>                Set psDescription to "Muestre vistas actuales y fije otras opciones de visualización."
74586>
74586>                // These are the static windows items. More will be created in onInitPopup 
74586>                Object oDisplayOptionsMenu is a cCJMenuItem
74588>                    Set peControlType to xtpControlPopup          
74589>                    Set psCaption to "Opciones de visualización"  // &D <--------------
74590>                    Set psToolTip to "Opciones de visualización"
74591>                    Set psDescription to "Fije opciones de visualización"
74592>
74592>                    Object oStatusbarMenu is a cCJStatusbarMenuItem
74594>                    End_Object
74595>
74595>                    Object oAutoArrangeIconsMenu is a cCJAutoArrangeIconsMenuItem
74597>                    End_Object
74598>
74598>                    Object oRestoreMenusMenu is a cCJRestoreMenusMenuItem
74600>                        Set pbControlBeginGroup to True
74601>                    End_Object
74602>
74602>                End_Object
74603>
74603>                Object oCascadeMenu is a cCJCascadeMenuItem
74605>                    Set pbControlBeginGroup to True
74606>                End_Object
74607>
74607>                Object oHorizTile is a cCJTileHorizontally
74609>                End_Object
74610>
74610>                Object oVertTile is a cCJTileVertically
74612>                End_Object
74613>
74613>                Object oMinimizeMenuItem is a cCJMinimizeWindowsMenuItem
74615>                    Set pbControlBeginGroup to True
74616>                End_Object
74617>
74617>                Object oRestoreMenuItem is a cCJRestoreWindowsMenuItem
74619>                End_Object
74620>
74620>                Object oArrangeIconsMenuItem is a cCJAutoArrangeIconsMenuItem
74622>                    Set pbControlBeginGroup to True
74623>                End_Object
74624>
74624>            End_Object
74625>
74625>            Object oHelpMenu is a cCJMenuItem
74627>                Set peControlType to xtpControlPopup    
74628>                Set psCaption to "&Ayuda"   // &H    <----------------------
74629>                Set psDescription to "Información para aprender y para usar esta aplicación DataFlex"
74630>                Set psToolTip to "Ayuda"
74631>
74631>                Object oHelpMenuItem is a cCJHelpMenuItem 
74633>                End_Object
74634>
74634>                Object oAboutMenuItem is a cCJAboutMenuItem
74636>                End_Object
74637>
74637>            End_Object
74638>
74638>        End_Object
74639>
74639>        Object oFindToolBar is a cCJToolbar
74641>            Set psTitle to "Barra de herramientas de búsqueda"
74642>
74642>            Object oFindFirstTool is a cCJFindFirstMenuItem
74644>            End_Object
74645>
74645>            Object oFindPreviousTool is a cCJFindPreviousMenuItem
74647>            End_Object
74648>
74648>            Object oFindMenuTool is a cCJFindMenuItem
74650>            End_Object
74651>
74651>            Object oFindNextTool is a cCJFindNextMenuItem
74653>            End_Object
74654>
74654>            Object oFindLastTool is a cCJFindLastMenuItem
74656>            End_Object
74657>
74657>            Object oPromptToolItem is a cCJPromptMenuItem
74659>                Set pbControlBeginGroup to True
74660>            End_Object
74661>
74661>        End_Object
74662>
74662>        Object oFileToolBar is a cCJToolbar
74664>            Set psTitle to "Barra de herramientas de introducción de datos"
74665>
74665>            Object oClearToolItem is a cCJClearMenuItem
74667>                Set peControlStyle to xtpButtonIconAndCaption
74668>            End_Object
74669>
74669>            Object oClearAllToolItem2 is a cCJClearAllMenuItem
74671>                Set peControlStyle to xtpButtonIconAndCaption
74672>            End_Object
74673>
74673>            Object oSaveToolItem is a cCJSaveMenuItem
74675>                Set peControlStyle to xtpButtonIconAndCaption
74676>                Set pbControlBeginGroup to True
74677>            End_Object
74678>
74678>            Object oDeleteToolItem is a cCJDeleteMenuItem
74680>                Set peControlStyle to xtpButtonIconAndCaption
74681>            End_Object
74682>
74682>        End_Object
74683>
74683>        Object oEditToolBar is a cCJToolbar
74685>            Set psTitle to "Barra de herramientas de edición"
74686>
74686>            Object oCutToolbarItem is a cCJCutMenuItem
74688>            End_Object
74689>
74689>            Object oCopyToolbarItem is a cCJCopyMenuItem
74691>            End_Object
74692>
74692>            Object oPasteToolbarItem is a cCJPasteMenuItem
74694>            End_Object
74695>
74695>            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
74697>                Set pbControlBeginGroup to True
74698>            End_Object
74699>
74699>        End_Object
74700>
74700>        Object oRememberToolbar is a cCJToolbar
74702>            Set psTitle to C_$Remember
74703>
74703>            Object oRememberItems is a cCJMenuItem
74705>
74705>                Set peControlType to xtpControlPopup
74706>                Set peControlStyle to xtpButtonCaption
74707>                Set psCaption to C_$Remember
74708>                
74708>                Object oMenuItem is a cCJRememberFieldMenuItem
74710>                    Set peControlStyle to xtpButtonIconAndCaption
74711>                End_Object
74712>                
74712>                Object oMenuItem is a cCJRememberLastFieldMenuItem
74714>                    Set peControlStyle to xtpButtonIconAndCaption
74715>                End_Object
74716>                
74716>                Object oMenuItem is a cCJUnRememberFieldMenuItem
74718>                    Set peControlStyle to xtpButtonIconAndCaption
74719>                End_Object
74720>                
74720>                Object oMenuItem is a cCJUnRememberFieldAllMenuItem
74722>                    Set peControlStyle to xtpButtonIconAndCaption
74723>                End_Object
74724>
74724>            End_Object
74725>            
74725>        End_Object
74726>        
74726>        Object oStatusBar is a cCJStatusBar
74728>
74728>            Object oStatusPane1 is a cCJStatusBarPane
74730>                Set piID to sbpIDIdlePane
74731>                Set pbStyleStretch to True
74732>            End_Object
74733>
74733>            Object oStatusPane2 is a cCJStatusBarPane
74735>                Set phoViewPane to Self
74736>                Set pbStyleStretch to True
74737>            End_Object
74738>
74738>        End_Object
74739>
74739>    End_Object
74740>
74740>    Object oClientArea is a ClientArea
74742>        Use StdAbout.pkg
Including file: StdAbout.pkg    (C:\Program Files\DataFlex 24.0\Pkg\StdAbout.pkg)
74742>>>// This provides a quick and simple way to create an about package for a program.
74742>>>// You need to create a message inside you client area called Activate_About.
74742>>>// Within this message you should send the message DoAbout passing needed
74742>>>// string information.
74742>>>//
74742>>>//       Procedure Activate_About
74742>>>//           Send DoAbout sTitle sVersion sCopyright sAuthor sBitmap
74742>>>//       End_Procedure
74742>>>//    where: sTitle =     Name of application. If none provided, uses caption
74742>>>//                        bar title
74742>>>//           sVersion   = Version Line. If none provided, will be blank
74742>>>//           sCopyRight = Copyright Line. If none provided, will be blank
74742>>>//           sAuthor    = Author name, blank if none provided
74742>>>//           sBitMap    = Bitmap logo. If none provided, standard VDF bitmap
74742>>>//                        is used.
74742>>>// It is expected that you will place this in your own object package. For
74742>>>// example an order about package may look like this:
74742>>>//
74742>>>//   // OrderAbout.pkg
74742>>>//   Use StdAbout.pkg
74742>>>//   Procedure Activate_About
74742>>>//      String sTitle sCopyright sVersion sAuthor
74742>>>//      Move "My Order Entry System" to sTitle
74742>>>//      Move "Version 2.1" to sVersion
74742>>>//      Move "Copyright xxxx, Super Software Inc." to sCopyright
74742>>>//      Move "John Smith"  to sAuthor
74742>>>//      Send DoAbout sTitle sVersion sCopyright sAuthor ""
74742>>>//   end_procedure
74742>>>//   // end of file.
74742>>>
74742>>>Use DfAbout.pkg
Including file: Dfabout.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfabout.pkg)
74742>>>>>Use LanguageText.pkg
74742>>>>>Use Windows.pkg
74742>>>>>Use DFbitmap.pkg
74742>>>>>Use GlobalFunctionsProcedures.pkg
74742>>>>>Use cTextEdit.pkg
74742>>>>>Use tWinStructs.pkg
74742>>>>>
74742>>>>>Use cli.pkg
74742>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 24.0\Pkg\DFBTRDRV.PKG)
74742>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
74742>>>>>>>// Notice      : This package contains constants and commands, used to call
74742>>>>>>>//               specific functions in the DFBTRDRV.
74742>>>>>>>Use Ui
74742>>>>>>>//
74742>>>>>>>// Driver Indentification
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>// Driver attributes
74742>>>>>>>//
74742>>>>>>>// Call_Driver functions ID's
74742>>>>>>>//
74742>>>>>>>//
74742>>>>>>>// DFBTRFN_CONVERT_FILE options
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// DFBTRFN_SET_OWNER options
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to create all vars which may be needed
74742>>>>>>>// in other commands.
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to set the owner of a Btrieve file.
74742>>>>>>>// File must have been opened.
74742>>>>>>>// Filenumber needs to be passed.
74742>>>>>>>// To clear set the owner to "".
74742>>>>>>>// Examples:
74742>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
74742>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
74742>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
74742>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
74742>>>>>>>// To clear:
74742>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to parse DFBTR_SET_OWNVER
74742>>>>>>>// options.
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to parse for Callback
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to clear the owner of a Btrieve file.
74742>>>>>>>// File must have been opened.
74742>>>>>>>// Filenumber needs to be passed.
74742>>>>>>>// Examples:
74742>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to add a owner name to the internal list of ownernames
74742>>>>>>>// which will be tries when opening files.
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to remove all owners from the internal list of ownernames
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to set the owner name to be used when opening the DDF files.
74742>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
74742>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
74742>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to change the transaction type.
74742>>>>>>>// Valid types are:
74742>>>>>>>//     DFBTRTT_NONE
74742>>>>>>>//     DFBTRTT_EXCLUSIVE
74742>>>>>>>//     DFBTRTT_CONCURRENT
74742>>>>>>>//
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to get the current transaction type.
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to set explicit_locking
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to get explicit locking
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>//
74742>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
74742>>>>>>>//
74742>>>>>>>
74742>>>>>>>// Purpose: An instance of this class can be used as a broker object to
74742>>>>>>>//          call several Dfbtrdrv releated methods.
74742>>>>>>>
74742>>>>>>>Class cDFBtrDrvHandler is an Array
74743>>>>>>>    
74743>>>>>>>    Procedure Construct_Object Integer iImage
74745>>>>>>>        Forward Send Construct_object iImage
74747>>>>>>>        
74747>>>>>>>        Property String  psDriverID "DFBTRDRV"
74748>>>>>>>    End_Procedure
74749>>>>>>>    
74749>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
74749>>>>>>>    //
74749>>>>>>>    
74749>>>>>>>    Function CKRevision Returns String
74751>>>>>>>        String  sDriverID
74751>>>>>>>        String  sRevision
74751>>>>>>>        String  sVoid
74751>>>>>>>        Integer iRetval
74751>>>>>>>        
74751>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74751>>>>>>>        // This error would otherwise be raised when we have an older
74751>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74751>>>>>>>        Send Ignore_error to Error_object_Id 20491
74752>>>>>>>        Get psDriverID to sDriverID
74753>>>>>>>        Move (Repeat(" ", 255)) to sRevision
74754>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
74759>>>>>>>        Send Trap_Error to Error_object_Id 20491
74760>>>>>>>        If (Trim(sRevision) = "") Begin
74762>>>>>>>            // Unable to get the revision. return all zeroes.
74762>>>>>>>            Move "0.0.0.0" to sRevision
74763>>>>>>>        End
74763>>>>>>>>
74763>>>>>>>        Function_Return sRevision
74764>>>>>>>    End_Function
74765>>>>>>>    
74765>>>>>>>    Function CkUsesUri Returns Integer
74767>>>>>>>        String  sDriverID
74767>>>>>>>        String  sVoid1
74767>>>>>>>        String  sVoid2
74767>>>>>>>        Integer iRetval
74767>>>>>>>        
74767>>>>>>>        Get psDriverID to sDriverID
74768>>>>>>>        
74768>>>>>>>        Move 0 to iRetval
74769>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74769>>>>>>>        // This error would otherwise be raised when we have an older
74769>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
74769>>>>>>>        Send Ignore_error to Error_object_Id 20491
74770>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
74775>>>>>>>        Send Trap_Error to Error_object_Id 20491
74776>>>>>>>        
74776>>>>>>>        Function_Return iRetval
74777>>>>>>>    End_Function
74778>>>>>>>    
74778>>>>>>>    
74778>>>>>>>    
74778>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
74778>>>>>>>    //
74778>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
74778>>>>>>>    //
74778>>>>>>>    
74778>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
74780>>>>>>>        Integer iPartRev
74780>>>>>>>        Integer iCurrentPart
74780>>>>>>>        Integer iSeparatorPos
74780>>>>>>>        
74780>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
74783>>>>>>>        
74783>>>>>>>        Move 0 to iCurrentPart
74784>>>>>>>        Repeat
74784>>>>>>>>
74784>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
74785>>>>>>>            If (iSeparatorPos > 0) Begin
74787>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
74788>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
74789>>>>>>>                Increment iCurrentPart
74790>>>>>>>            End
74790>>>>>>>>
74790>>>>>>>            Else If (sRevision <> "") Begin
74793>>>>>>>                Move sRevision to iPartRev
74794>>>>>>>                Move "" to sRevision
74795>>>>>>>                Increment iCurrentPart
74796>>>>>>>            End
74796>>>>>>>>
74796>>>>>>>            Else ;                Move -1 to iPartRev
74798>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
74800>>>>>>>        
74800>>>>>>>        Function_Return iPartRev
74801>>>>>>>    End_Function
74802>>>>>>>    
74802>>>>>>>    
74802>>>>>>>    
74802>>>>>>>    //
74802>>>>>>>    //  Returns the major revision of the CK
74802>>>>>>>    //
74802>>>>>>>    
74802>>>>>>>    Function CKMajorRevision Returns Integer
74804>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
74805>>>>>>>    End_Function
74806>>>>>>>    
74806>>>>>>>    
74806>>>>>>>    
74806>>>>>>>    //  Returns the minor revision of the CK
74806>>>>>>>    //
74806>>>>>>>    
74806>>>>>>>    Function CKMinorRevision Returns Integer
74808>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
74809>>>>>>>    End_Function
74810>>>>>>>    
74810>>>>>>>    
74810>>>>>>>    //  Returns the release revision of the CK
74810>>>>>>>    //
74810>>>>>>>    
74810>>>>>>>    Function CKReleaseRevision Returns Integer
74812>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
74813>>>>>>>    End_Function
74814>>>>>>>    
74814>>>>>>>    
74814>>>>>>>    //  Returns the major revision of the CK
74814>>>>>>>    //
74814>>>>>>>    
74814>>>>>>>    Function CKBuildRevision Returns Integer
74816>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
74817>>>>>>>    End_Function
74818>>>>>>>    
74818>>>>>>>    
74818>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
74818>>>>>>>    //
74818>>>>>>>    
74818>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
74820>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
74823>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
74826>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
74829>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
74832>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
74835>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
74839>>>>>>>            End
74839>>>>>>>>
74839>>>>>>>        End
74839>>>>>>>>
74839>>>>>>>        
74839>>>>>>>        Function_Return (False)
74840>>>>>>>    End_Function
74841>>>>>>>    
74841>>>>>>>    //   Functions to query the Pervasive.SQL version:
74841>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
74841>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
74841>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
74841>>>>>>>    //
74841>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
74841>>>>>>>    //   in the following format:
74841>>>>>>>    //       <version>.<revision>.<type>
74841>>>>>>>    //   possible values for <type>:
74841>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
74841>>>>>>>    //         server using Workgroup authentication mode
74841>>>>>>>    //       C for client cache engine
74841>>>>>>>    //       D for DOS workstation
74841>>>>>>>    //       N for client Requester
74841>>>>>>>    //       S for NetWare server
74841>>>>>>>    //       T for 32-bit Windows server engine
74841>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
74841>>>>>>>    //
74841>>>>>>>    //   example:
74841>>>>>>>    //       8.50.T
74841>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
74841>>>>>>>    //   32-bits Windows server.
74841>>>>>>>    //
74841>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
74841>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
74841>>>>>>>    //
74841>>>>>>>    //   If the version information is not available or can not be obtained
74841>>>>>>>    //   the functions will return "0.0.0"
74841>>>>>>>    
74841>>>>>>>    //  Returns the version information of the
74841>>>>>>>    //           Pervasive.SQL Client requester.
74841>>>>>>>    
74841>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
74843>>>>>>>        
74843>>>>>>>        String  sDriverID
74843>>>>>>>        String  sVersion
74843>>>>>>>        String  sVoid
74843>>>>>>>        Integer iRetval
74843>>>>>>>        
74843>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74843>>>>>>>        // This error would otherwise be raised when we have an older
74843>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74843>>>>>>>        Send Ignore_error to Error_object_Id 20491
74844>>>>>>>        Get psDriverID to sDriverID
74845>>>>>>>        Move (Repeat(" ", 255)) to sVersion
74846>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
74851>>>>>>>        Send Trap_Error to Error_object_Id 20491
74852>>>>>>>        If (Trim(sVersion) = "") Begin
74854>>>>>>>            // Unable to get the revision. return all zeroes.
74854>>>>>>>            Move "0.0.0" to sVersion
74855>>>>>>>        End
74855>>>>>>>>
74855>>>>>>>        Function_Return sVersion
74856>>>>>>>    End_Function
74857>>>>>>>    
74857>>>>>>>    //           Pervasive.SQL Engine
74857>>>>>>>    
74857>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
74859>>>>>>>        
74859>>>>>>>        String  sDriverID
74859>>>>>>>        String  sVersion
74859>>>>>>>        String  sVoid
74859>>>>>>>        Integer iRetval
74859>>>>>>>        
74859>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74859>>>>>>>        // This error would otherwise be raised when we have an older
74859>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74859>>>>>>>        Send Ignore_error to Error_object_Id 20491
74860>>>>>>>        Get psDriverID to sDriverID
74861>>>>>>>        Move (Repeat(" ", 255)) to sVersion
74862>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
74867>>>>>>>        Send Trap_Error to Error_object_Id 20491
74868>>>>>>>        If (Trim(sVersion) = "") Begin
74870>>>>>>>            // Unable to get the revision. return all zeroes.
74870>>>>>>>            Move "0.0.0" to sVersion
74871>>>>>>>        End
74871>>>>>>>>
74871>>>>>>>        Function_Return sVersion
74872>>>>>>>    End_Function
74873>>>>>>>    
74873>>>>>>>    //  Returns the version information of the
74873>>>>>>>    //           Pervasive.SQL Server Engine
74873>>>>>>>    
74873>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
74875>>>>>>>        
74875>>>>>>>        String  sDriverID
74875>>>>>>>        String  sVersion
74875>>>>>>>        String  sVoid
74875>>>>>>>        Integer iRetval
74875>>>>>>>        
74875>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
74875>>>>>>>        // This error would otherwise be raised when we have an older
74875>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
74875>>>>>>>        Send Ignore_error to Error_object_Id 20491
74876>>>>>>>        Get psDriverID to sDriverID
74877>>>>>>>        Move (Repeat(" ", 255)) to sVersion
74878>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
74883>>>>>>>        Send Trap_Error to Error_object_Id 20491
74884>>>>>>>        If (Trim(sVersion) = "") Begin
74886>>>>>>>            // Unable to get the revision. return all zeroes.
74886>>>>>>>            Move "0.0.0" to sVersion
74887>>>>>>>        End
74887>>>>>>>>
74887>>>>>>>        Function_Return sVersion
74888>>>>>>>    End_Function
74889>>>>>>>    
74889>>>>>>>End_Class
74890>>>>>>>
74890>>>>>>>
74890>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Program Files\DataFlex 24.0\Pkg\MSSqldrv.pkg)
74890>>>>>>>//     Package that declares MS SQL driver constants and functions.
74890>>>>>>>//     This package can be used by developers who want to add Data Access
74890>>>>>>>//     MS SQL Client specific code to a DataFlex application.
74890>>>>>>>
74890>>>>>>>Use Cli.pkg
74890>>>>>>>Use SQL.pkg
74890>>>>>>>
74890>>>>>>>//   Driver Indentification
74890>>>>>>>
74890>>>>>>>//   Error number constants
74890>>>>>>>
74890>>>>>>>
74890>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
74890>>>>>>>
74890>>>>>>>
74890>>>>>>>
74890>>>>>>>
74890>>>>>>>
74890>>>>>>>
74890>>>>>>>// SQL Server spcific types.
74890>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
74890>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
74890>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
74890>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
74890>>>>>>>
74890>>>>>>>// SQL Server spcific types.
74890>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
74890>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
74890>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
74890>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
74890>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
74890>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
74890>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
74890>>>>>>>
74890>>>>>>>
74890>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
74890>>>>>>>//
74890>>>>>>>//     Setup a constraint for a file.
74890>>>>>>>
74890>>>>>>>
74890>>>>>>>Class cMSSQLHandler is a cCLIHandler
74891>>>>>>>    
74891>>>>>>>    Procedure Construct_Object
74893>>>>>>>        Forward Send Construct_Object
74895>>>>>>>        
74895>>>>>>>        Set psDriverID to MSSQLDRV_ID
74896>>>>>>>    End_Procedure
74897>>>>>>>    
74897>>>>>>>    
74897>>>>>>>    
74897>>>>>>>    //   Extract the list from the out connect string.
74897>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
74899>>>>>>>        String  sItem
74899>>>>>>>        Integer iStart
74899>>>>>>>        Integer iEnd
74899>>>>>>>        
74899>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
74902>>>>>>>        
74902>>>>>>>        Send Delete_Data to hoStore
74903>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
74904>>>>>>>        While (iStart > 0)
74908>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
74909>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
74912>>>>>>>            Else Begin
74913>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
74914>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
74915>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
74918>>>>>>>                
74918>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
74921>>>>>>>                
74921>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
74924>>>>>>>            End
74924>>>>>>>>
74924>>>>>>>        Loop
74925>>>>>>>>
74925>>>>>>>        
74925>>>>>>>        Function_Return (Item_Count(hoStore))
74926>>>>>>>    End_Procedure
74927>>>>>>>    
74927>>>>>>>    
74927>>>>>>>    
74927>>>>>>>    //   Call the driver's browse connect function
74927>>>>>>>    Function BrowseConnect String sInConnStr Returns String
74929>>>>>>>        String  sDriver
74929>>>>>>>        String  sOutConnStr
74929>>>>>>>        Integer iArg
74929>>>>>>>        Integer iRetval
74929>>>>>>>        
74929>>>>>>>        Get psDriverID to sDriver
74930>>>>>>>        If (sDriver <> "") Begin
74932>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
74933>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
74938>>>>>>>        End
74938>>>>>>>>
74938>>>>>>>        
74938>>>>>>>        Function_Return sOutConnStr
74939>>>>>>>    End_Function// BrowseConnect
74940>>>>>>>    
74940>>>>>>>    
74940>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
74942>>>>>>>        String  sDriver
74942>>>>>>>        String  sOutConnStr
74942>>>>>>>        Integer iArg
74942>>>>>>>        Integer iRetval
74942>>>>>>>        
74942>>>>>>>        Move 1 to iArg // Browses only local
74943>>>>>>>        
74943>>>>>>>        Get psDriverID to sDriver
74944>>>>>>>        If (sDriver <> "") Begin
74946>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
74947>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
74952>>>>>>>        End
74952>>>>>>>>
74952>>>>>>>        
74952>>>>>>>        Function_Return sOutConnStr
74953>>>>>>>    End_Function// BrowseConnect
74954>>>>>>>    
74954>>>>>>>    
74954>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
74956>>>>>>>        
74956>>>>>>>        String  sServerList
74956>>>>>>>        Integer iNumServers
74956>>>>>>>        Integer iDriver
74956>>>>>>>        Integer iClientVersion
74956>>>>>>>        String  sDriver
74956>>>>>>>        
74956>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
74957>>>>>>>        
74957>>>>>>>        If (iDriver) Begin
74959>>>>>>>            
74959>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
74962>>>>>>>            
74962>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
74963>>>>>>>            
74963>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
74964>>>>>>>            If (iNetworkLocal = 0) Begin
74966>>>>>>>                Get BrowseConnect sDriver to sServerList
74967>>>>>>>            End
74967>>>>>>>>
74967>>>>>>>            Else Begin
74968>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
74969>>>>>>>            End
74969>>>>>>>>
74969>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
74970>>>>>>>        End
74970>>>>>>>>
74970>>>>>>>        
74970>>>>>>>        Function_Return iNumServers
74971>>>>>>>        
74971>>>>>>>    End_Function
74972>>>>>>>    
74972>>>>>>>    //   Enumerate the available SQL Server database servers
74972>>>>>>>    //   This function will return all SQL Server instances on the network.
74972>>>>>>>    //   This may take a long time.
74972>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
74972>>>>>>>    Function EnumerateServers Returns Integer
74974>>>>>>>        
74974>>>>>>>        Integer iNumServers
74974>>>>>>>        Integer iNetworkLocal
74974>>>>>>>        
74974>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
74975>>>>>>>        
74975>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
74976>>>>>>>        
74976>>>>>>>        Function_Return iNumServers
74977>>>>>>>        
74977>>>>>>>    End_Function
74978>>>>>>>    
74978>>>>>>>    
74978>>>>>>>    //   Enumerate the available SQL Server database servers
74978>>>>>>>    //   This function will return only return SQL Server instance on the local machine
74978>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
74978>>>>>>>    Function EnumerateServersLocal Returns Integer
74980>>>>>>>        
74980>>>>>>>        Integer iNumServers
74980>>>>>>>        Integer iNetworkLocal
74980>>>>>>>        
74980>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
74981>>>>>>>        
74981>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
74982>>>>>>>        
74982>>>>>>>        Function_Return iNumServers
74983>>>>>>>        
74983>>>>>>>    End_Function
74984>>>>>>>    
74984>>>>>>>    
74984>>>>>>>    
74984>>>>>>>    //   Enumerate database in a given server.
74984>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
74986>>>>>>>        Integer hoSQL
74986>>>>>>>        String  sConnect
74986>>>>>>>        String  sDatabase
74986>>>>>>>        Integer hdbc
74986>>>>>>>        Integer hstmt
74986>>>>>>>        Integer iFetchResult
74986>>>>>>>        
74986>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
74989>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
74992>>>>>>>        
74992>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
74995>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
74997>>>>>>>        
74997>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
74999>>>>>>>            Move Current_Object to hoSQL
75000>>>>>>>        End_Object
75001>>>>>>>        
75001>>>>>>>        If (hoSQL <> 0) Begin
75003>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
75004>>>>>>>            If (hdbc <> 0) Begin
75006>>>>>>>                Get SQLOpen of hdbc to hstmt
75007>>>>>>>                If (hstmt <> 0) Begin
75009>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
75009>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
75009>>>>>>>                    //   approach in case meta data might change, the stored procedure will
75009>>>>>>>                    //   stay the same.
75009>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
75010>>>>>>>                    Send SQLCall to hstmt
75011>>>>>>>                    Repeat
75011>>>>>>>>
75011>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
75012>>>>>>>                        If (iFetchResult <> 0) Begin
75014>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
75015>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
75016>>>>>>>                        End
75016>>>>>>>>
75016>>>>>>>                    Until (iFetchResult = 0)
75018>>>>>>>                    
75018>>>>>>>                    Send SQLClose to hstmt
75019>>>>>>>                End
75019>>>>>>>>
75019>>>>>>>                Send SQLDisconnect to hdbc
75020>>>>>>>            End
75020>>>>>>>>
75020>>>>>>>        End
75020>>>>>>>>
75020>>>>>>>        Send Destroy_Object to hoSQL
75021>>>>>>>        
75021>>>>>>>        Function_Return (Item_Count(Current_Object))
75022>>>>>>>    End_Function
75023>>>>>>>    
75023>>>>>>>    
75023>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
75025>>>>>>>        
75025>>>>>>>        String  sSqlServerClientVersionName
75025>>>>>>>        
75025>>>>>>>        
75025>>>>>>>        Case Begin
75025>>>>>>>
75025>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
75027>>>>>>>                Move SQLSERVER2019CLIENTNAME to sSqlServerClientVersionName
75028>>>>>>>                Case Break
75029>>>>>>>            
75029>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
75032>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
75033>>>>>>>                Case Break
75034>>>>>>>                
75034>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
75037>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
75038>>>>>>>                Case Break
75039>>>>>>>            
75039>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
75042>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
75043>>>>>>>                Case Break
75044>>>>>>>            
75044>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
75047>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
75048>>>>>>>                Case Break
75049>>>>>>>            
75049>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
75052>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
75053>>>>>>>                Case Break
75054>>>>>>>            
75054>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
75057>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
75058>>>>>>>                Case Break
75059>>>>>>>            
75059>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
75062>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
75063>>>>>>>                Case Break
75064>>>>>>>            
75064>>>>>>>            Case Else
75064>>>>>>>                Move (SFormat("%1 (version %2) ",SQLSERVERUNKNOWNCLIENTNAME,iClientVersion)) to sSqlServerClientVersionName
75065>>>>>>>                
75065>>>>>>>        Case End
75065>>>>>>>        
75065>>>>>>>        
75065>>>>>>>        Function_Return sSqlServerClientVersionName
75066>>>>>>>        
75066>>>>>>>    End_Function
75067>>>>>>>
75067>>>>>>>
75067>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
75069>>>>>>>        
75069>>>>>>>        String  sSqlServerClientDriverName
75069>>>>>>>        
75069>>>>>>>        Case Begin
75069>>>>>>>
75069>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
75071>>>>>>>                Move SQLSERVER2019DRVRSTR to sSqlServerClientDriverName
75072>>>>>>>                Case Break
75073>>>>>>>
75073>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
75076>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
75077>>>>>>>                Case Break
75078>>>>>>>                
75078>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
75081>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
75082>>>>>>>                Case Break
75083>>>>>>>            
75083>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
75086>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
75087>>>>>>>                Case Break
75088>>>>>>>            
75088>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
75091>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
75092>>>>>>>                Case Break
75093>>>>>>>            
75093>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
75096>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
75097>>>>>>>                Case Break
75098>>>>>>>            
75098>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
75101>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
75102>>>>>>>                Case Break
75103>>>>>>>            
75103>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
75106>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
75107>>>>>>>                Case Break
75108>>>>>>>            
75108>>>>>>>            Case Else
75108>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
75109>>>>>>>                
75109>>>>>>>        Case End
75109>>>>>>>        
75109>>>>>>>        
75109>>>>>>>        Function_Return sSqlServerClientDriverName
75110>>>>>>>        
75110>>>>>>>    End_Function
75111>>>>>>>    
75111>>>>>>>    
75111>>>>>>>End_Class
75112>>>>>>>
75112>>>>>>>
75112>>>>>
75112>>>>>Register_Function phoWorkspace Returns Handle
75112>>>>>Register_Function Help_filename Returns String
75112>>>>>Register_Function GetHelpFile Returns String
75112>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
75112>>>>>
75112>>>>>// Do not call directly, use the wrapper function instead
75112>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
75113>>>>>
75113>>>>>// Wrapper Function WNetGetUser
75113>>>>>Function WNetGetUser Global ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
75115>>>>>    
75115>>>>>    DWord   dwResult     
75115>>>>>    UWide   uwName uwUserName
75115>>>>>    UWide   uwName uwUserName
75115>>>>>        
75115>>>>>    Send StringToWide lpName (&uwName)
75116>>>>>    
75116>>>>>    Send WideSetBuffer lpUser_Name lpLength (&uwUserName)    
75117>>>>>    
75117>>>>>    Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
75118>>>>>    
75118>>>>>    Send WideToString (&uwUserName) lpUser_Name
75119>>>>>    
75119>>>>>    Function_Return dwResult
75120>>>>>End_Function
75121>>>>>
75121>>>>>//    This function reads the current username Of windows and returns that
75121>>>>>//    name or an text unknown user
75121>>>>>Function Network_User_Name for cDesktop Returns String
75123>>>>>    WString wName
75123>>>>>    Integer iRetval iLength
75123>>>>>    
75123>>>>>    Move 0 to iLength
75124>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
75125>>>>>    Move (ZeroString(iLength)) to wName
75126>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
75127>>>>>    
75127>>>>>    If (iRetval = NO_ERROR) Begin
75129>>>>>        Function_Return (CString (wName))
75130>>>>>    End
75130>>>>>>
75130>>>>>    
75130>>>>>    Function_Return "User Unknown"
75131>>>>>End_Function
75132>>>>>
75132>>>>>External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
75133>>>>>
75133>>>>>External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
75134>>>>>
75134>>>>>Class SysinfoDisplay is a cTextEdit
75135>>>>>    Procedure Construct_Object
75137>>>>>        Forward Send Construct_Object
75139>>>>>        
75139>>>>>        Set Location to 6 6
75140>>>>>        Set Size to 110 255
75141>>>>>        Set Read_Only_State to True
75142>>>>>        Set pbWrap to False
75143>>>>>    End_Procedure
75144>>>>>    
75144>>>>>    //    This method will show the name Of the current directory in the system
75144>>>>>    //    information box
75144>>>>>    Procedure Show_Current_Directory
75146>>>>>        String sDir
75146>>>>>        
75146>>>>>        Get_Current_Directory to sDir
75147>>>>>        
75147>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
75148>>>>>    End_Procedure
75149>>>>>    
75149>>>>>    Procedure Show_Windows_Directory
75151>>>>>        String sWindir
75151>>>>>        
75151>>>>>        Get_Windows_Directory to sWindir
75152>>>>>        
75152>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
75153>>>>>    End_Procedure
75154>>>>>    
75154>>>>>    Procedure Show_Current_User
75156>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
75157>>>>>    End_Procedure
75158>>>>>    
75158>>>>>    Procedure Show_Number_Format
75160>>>>>        Integer iFormat
75160>>>>>        String sFormatText
75160>>>>>        
75160>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
75163>>>>>        Move (Character (iFormat)) to sFormatText
75164>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
75165>>>>>        
75165>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
75168>>>>>        Move (Character (iFormat)) to sFormatText
75169>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
75170>>>>>    End_Procedure
75171>>>>>    
75171>>>>>    Procedure Show_Filelist_Name
75173>>>>>        String sFilename
75173>>>>>        
75173>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
75176>>>>>        
75176>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
75177>>>>>        Send AppendTextLn ""
75178>>>>>    End_Procedure
75179>>>>>    
75179>>>>>    Procedure Show_Lock_Delay
75181>>>>>        Integer iLockdelay
75181>>>>>        
75181>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
75184>>>>>        
75184>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
75185>>>>>    End_Procedure
75186>>>>>    
75186>>>>>    Procedure Show_Lock_Timeout
75188>>>>>        Integer iLockTimeout
75188>>>>>        
75188>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
75191>>>>>        
75191>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
75192>>>>>    End_Procedure
75193>>>>>    
75193>>>>>    Procedure Show_Screen_Size
75195>>>>>        Integer iYscreensize iXscreensize
75195>>>>>        
75195>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) to iXscreensize
75196>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) to iYscreensize
75197>>>>>        
75197>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
75198>>>>>    End_Procedure
75199>>>>>    
75199>>>>>    Procedure Show_Page_Size
75201>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
75202>>>>>    End_Procedure
75203>>>>>    
75203>>>>>    Procedure Show_Date
75205>>>>>        Date dToday
75205>>>>>        
75205>>>>>        Move (CurrentDateTime()) to  dToday
75206>>>>>        
75206>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
75207>>>>>    End_Procedure
75208>>>>>    
75208>>>>>    Procedure Show_Date_Format
75210>>>>>        Integer iDateFormat
75210>>>>>        String sDateFormat
75210>>>>>        
75210>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
75213>>>>>        Case Begin
75213>>>>>            Case (iDateFormat = DF_DATE_USA)
75215>>>>>                Move C_$USA to sDateFormat
75216>>>>>                Case Break
75217>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
75220>>>>>                Move C_$European to sDateFormat
75221>>>>>                Case Break
75222>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
75225>>>>>                Move C_$Military to sDateFormat
75226>>>>>                Case Break
75227>>>>>            Case Else
75227>>>>>                Move C_$UnknownDateType to sDateFormat
75228>>>>>                Case Break
75229>>>>>        Case End
75229>>>>>        
75229>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
75230>>>>>    End_Procedure
75231>>>>>    
75231>>>>>    Procedure Show_Systemresources
75233>>>>>        tWinMemoryStatusEx MemoryStatusInfo
75233>>>>>        tWinMemoryStatusEx MemoryStatusInfo
75233>>>>>        Integer iRetval
75233>>>>>        
75233>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
75234>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
75235>>>>>        If (iRetval = 0) Begin
75237>>>>>            Move (ShowLastError ()) to iRetval
75238>>>>>        End
75238>>>>>>
75238>>>>>        
75238>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, MemoryStatusInfo.ullTotalPhys))
75239>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, MemoryStatusInfo.dwMemoryLoad))
75240>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Integer ( Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0)))
75241>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Integer ( Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0)))
75242>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Integer ( Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0)))
75243>>>>>    End_Procedure
75244>>>>>    
75244>>>>>    Procedure Show_Registration
75246>>>>>        String sRegName
75246>>>>>        Integer iSN iMaxUsers
75246>>>>>        
75246>>>>>        Registration sRegName iSN
75247>>>>>>
75247>>>>>        
75247>>>>>        Get_Licensed_Max_Users to iMaxUsers
75248>>>>>        
75248>>>>>        Send AppendTextLn ""
75249>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
75250>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
75251>>>>>        Send AppendTextLn (SFormat (C_$MaxNumUsers, iMaxUsers))
75252>>>>>    End_Procedure
75253>>>>>    
75253>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
75253>>>>>    // To the workspace object passing the an object and message To send back
75253>>>>>    // To this object. It is expected that the workspace object will send this
75253>>>>>    // message for every line Of information it wants displayed (passing the
75253>>>>>    // information To be displayed
75253>>>>>    Register_Procedure EnumerateWorkspaceData Handle hObjId Handle hmMessId
75253>>>>>    
75253>>>>>    Procedure Show_ServicePack
75255>>>>>        String sKey sVersionDescription sVersion
75255>>>>>        Handle hoRegistry
75255>>>>>        Boolean bExists bOpened
75255>>>>>        
75255>>>>>        Get Create (RefClass (cRegistry)) to hoRegistry
75256>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
75257>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
75258>>>>>        
75258>>>>>        Move C_DFVersionRegistryRoot to sKey
75259>>>>>        Get KeyExists of hoRegistry sKey to bExists
75260>>>>>        If (bExists) Begin
75262>>>>>            Get OpenKey of hoRegistry sKey to bOpened
75263>>>>>            If (bOpened) Begin
75265>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
75266>>>>>                If (bExists) Begin
75268>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersionDescription
75269>>>>>                End
75269>>>>>>
75269>>>>>                
75269>>>>>                Get ValueExists of hoRegistry "CurrentVersion" to bExists
75270>>>>>                If (bExists) Begin
75272>>>>>                    Get ReadString of hoRegistry "CurrentVersion" to sVersion
75273>>>>>                End
75273>>>>>>
75273>>>>>                Send CloseKey of hoRegistry
75274>>>>>            End
75274>>>>>>
75274>>>>>        End
75274>>>>>>
75274>>>>>        Send Destroy of hoRegistry
75275>>>>>        
75275>>>>>        If (sVersionDescription <> "") Begin
75277>>>>>            Send AppendTextLn (sVersionDescription * "-" * sVersion)
75278>>>>>            Send AppendTextLn ""
75279>>>>>        End
75279>>>>>>
75279>>>>>    End_Procedure
75280>>>>>    
75280>>>>>    
75280>>>>>    Procedure Show_WorkspaceInformation
75282>>>>>        Integer hoWorkspace
75282>>>>>        
75282>>>>>        If (ghoApplication <> 0) Begin
75284>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
75285>>>>>            If (hoWorkspace <> 0) Begin
75287>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self (Refproc (AppendTextLn))
75288>>>>>                Send AppendTextLn ""
75289>>>>>            End
75289>>>>>>
75289>>>>>        End
75289>>>>>>
75289>>>>>    End_Procedure
75290>>>>>    
75290>>>>>    // If connection ids are used, we will send the message EnumerateConnections
75290>>>>>    // to the connection manager object passing the an object and message to send
75290>>>>>    // back to this object. It is expected that the connection manager object will
75290>>>>>    // send this message for every line Of information it wants displayed (passing
75290>>>>>    // the information To be displayed
75290>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
75290>>>>>    
75290>>>>>    Procedure Show_ConnectionIdInformation
75292>>>>>        If (ghoConnection > 0) Begin
75294>>>>>            Send AppendTextLn ""
75295>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
75296>>>>>        End
75296>>>>>>
75296>>>>>    End_Procedure
75297>>>>>    
75297>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
75299>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
75300>>>>>    End_Function
75301>>>>>    
75301>>>>>    Procedure Show_Versions
75303>>>>>        Integer iVersion iRevision iBuild
75303>>>>>        
75303>>>>>        Version_Information iVersion iRevision iBuild
75305>>>>>        
75305>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(Self,iVersion,iRevision,iBuild) ))
75306>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(Self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
75307>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(Self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
75308>>>>>    End_Procedure
75309>>>>>    
75309>>>>>    Procedure Show_Platform
75311>>>>>        Send AppendTextLn (SFormat (C_$Platform,"64-bit"))
75312>>>>>    End_Procedure
75313>>>>>    
75313>>>>>    Function CKRevisionNumber String sDriverID Returns String
75315>>>>>        Handle hoCLIHandler
75315>>>>>        Handle hoDFBtrDrvHandler
75315>>>>>        String sCKRevision
75315>>>>>        
75315>>>>>        
75315>>>>>        If (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV") Begin
75317>>>>>            Get Create (RefClass(cCLIHandler)) to hoCLIHandler
75318>>>>>            Set psDriverID of hoCLIHandler to sDriverID
75319>>>>>            Move (CKRevision(hoCLIHandler)) to sCKRevision
75320>>>>>            Send Destroy of hoCLIHandler
75321>>>>>        End
75321>>>>>>
75321>>>>>        Else Begin
75322>>>>>            If (sDriverID = "DFBTRDRV") Begin
75324>>>>>                Get Create (RefClass(cDFBtrDrvHandler)) to hoDFBtrDrvHandler
75325>>>>>                Set psDriverID of hoDFBtrDrvHandler to sDriverID
75326>>>>>                Move (CKRevision(hoDFBtrDrvHandler)) to sCKRevision
75327>>>>>                Send Destroy of hoDFBtrDrvHandler
75328>>>>>            End
75328>>>>>>
75328>>>>>        End
75328>>>>>>
75328>>>>>        
75328>>>>>        Function_Return sCKRevision
75329>>>>>    End_Function
75330>>>>>    
75330>>>>>    
75330>>>>>    Function IsDataAccessCK String sDriverID Returns Boolean
75332>>>>>        
75332>>>>>        If (sDriverID = "DATAFLEX") Begin
75334>>>>>            Function_Return False
75335>>>>>        End
75335>>>>>>
75335>>>>>        
75335>>>>>        Function_Return (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV" or sDriverID = "DFBTRDRV")
75336>>>>>    End_Function
75337>>>>>    
75337>>>>>    
75337>>>>>    Procedure Show_Drivers
75339>>>>>        String sCurrentDriver sRevNumber
75339>>>>>        String sLoadedDrivers sClientDriver
75339>>>>>        Integer iNumberOfDrivers iCount iClientVersion iMSSQLIndex
75339>>>>>        Boolean bOK
75339>>>>>        Handle hoMsqlDrv
75339>>>>>        
75339>>>>>        Move "" to sLoadedDrivers
75340>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
75343>>>>>        For iCount from 1 to iNumberOfDrivers
75349>>>>>>
75349>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
75352>>>>>            If (sLoadedDrivers <> "") Begin
75354>>>>>                Move (Append (sLoadedDrivers, ", ")) to sLoadedDrivers
75355>>>>>            End
75355>>>>>>
75355>>>>>            Get IsDataAccessCK sCurrentDriver to bOK
75356>>>>>            If (bOK) Begin
75358>>>>>                If (sCurrentDriver = "MSSQLDRV") Begin
75360>>>>>                    Move iCount to iMSSQLIndex
75361>>>>>                End
75361>>>>>>
75361>>>>>                Get CKRevisionNumber sCurrentDriver to sRevNumber
75362>>>>>                // if mssqldrv, show the client number
75362>>>>>                Move (sCurrentDriver * "(" + sRevNumber + ")") to sCurrentDriver
75363>>>>>            End
75363>>>>>>
75363>>>>>            Move (Append (sLoadedDrivers, sCurrentDriver)) to sLoadedDrivers
75364>>>>>        Loop
75365>>>>>>
75365>>>>>        Send AppendTextLn (SFormat (C_$DatabaseDriver, sLoadedDrivers))
75366>>>>>        If (iMSSQLIndex>0) Begin
75368>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iMSSQLIndex to iClientVersion
75371>>>>>            Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
75372>>>>>            Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
75373>>>>>            Send Destroy of hoMsqlDrv
75374>>>>>            Send AppendTextLn (SFormat("MSSQLDRV Client Version: %1", sClientDriver))
75375>>>>>        End
75375>>>>>>
75375>>>>>    End_Procedure
75376>>>>>    
75376>>>>>    Procedure Show_HelpFile
75378>>>>>        String sHelpFile
75378>>>>>        Integer eHelpType
75378>>>>>        
75378>>>>>        If (ghoApplication <> 0) Begin
75380>>>>>            Get peHelpType of ghoApplication to eHelpType
75381>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
75383>>>>>                Get GetHelpFile of ghoHtmlHelp to sHelpFile
75384>>>>>            End
75384>>>>>>
75384>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
75387>>>>>                Get Help_filename of Help_object_id to sHelpFile
75388>>>>>            End
75388>>>>>>
75388>>>>>            Else Begin
75389>>>>>                Move C_$ThereIsNoHelpfileDefined to sHelpFile
75390>>>>>            End
75390>>>>>>
75390>>>>>            
75390>>>>>            Send AppendTextLn ""
75391>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
75392>>>>>        End
75392>>>>>>
75392>>>>>    End_Procedure
75393>>>>>    
75393>>>>>    Procedure Show_EnterAsTab
75395>>>>>        Boolean bEnterKeyAsTabKey
75395>>>>>        String sText
75395>>>>>        
75395>>>>>        If (ghoApplication <> 0) Begin
75397>>>>>            Get pbEnterKeyAsTabKey of ghoApplication to bEnterKeyAsTabKey
75398>>>>>            If (bEnterKeyAsTabKey) Begin
75400>>>>>                Move "True" to sText
75401>>>>>            End
75401>>>>>>
75401>>>>>            Else Begin
75402>>>>>                Move "False" to sText
75403>>>>>            End
75403>>>>>>
75403>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
75404>>>>>        End
75404>>>>>>
75404>>>>>    End_Procedure
75405>>>>>    
75405>>>>>    //    During activation we will remove the old information and add the newly
75405>>>>>    //    found systeminformation
75405>>>>>    Procedure Add_Focus Integer hoRoot
75407>>>>>        Forward Send Add_Focus hoRoot
75409>>>>>        
75409>>>>>        Send Delete_Data
75410>>>>>        
75410>>>>>        Set Changed_State to False
75411>>>>>        Set Read_Only_State to True
75412>>>>>        
75412>>>>>        Send Show_ServicePack
75413>>>>>        Send Show_Versions
75414>>>>>        Send Show_Platform
75415>>>>>        Send Show_Drivers
75416>>>>>        If (ghoConnection <> 0) Begin
75418>>>>>            Send Show_ConnectionIdInformation
75419>>>>>        End
75419>>>>>>
75419>>>>>        Send Show_HelpFile
75420>>>>>        Send Show_Current_Directory
75421>>>>>        Send Show_Filelist_Name
75422>>>>>        If (ghoApplication <> 0) Begin
75424>>>>>            Send Show_WorkSpaceInformation // added To show WS info
75425>>>>>        End
75425>>>>>>
75425>>>>>        Send Show_Current_User
75426>>>>>        Send Show_Windows_Directory
75427>>>>>        Send Show_Screen_Size
75428>>>>>        Send Show_Page_Size
75429>>>>>        Send Show_EnterAsTab
75430>>>>>        Send Show_Number_Format
75431>>>>>        Send Show_Date_Format
75432>>>>>        Send Show_Lock_Delay
75433>>>>>        Send Show_Lock_Timeout
75434>>>>>        Send Show_Date
75435>>>>>        Send Show_Systemresources
75436>>>>>        Send Show_Registration
75437>>>>>        Send Beginning_of_Data
75438>>>>>        
75438>>>>>        Set Icon to 'default.ico'
75439>>>>>    End_Procedure
75440>>>>>End_Class
75441>>>>>
75441>>>>>Class SysInfoDialog is a ModalPanel
75442>>>>>    Procedure Construct_Object
75444>>>>>        Forward Send Construct_Object
75446>>>>>        
75446>>>>>        Set Label to C_$SystemInformation
75447>>>>>        Set Size to 140 267
75448>>>>>        Set piMinSize to 140 267
75449>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
75450>>>>>        Set Border_Style to Border_Thick
75451>>>>>        
75451>>>>>        Object oSysinfoDisplay is a SysInfoDisplay
75453>>>>>            Set peAnchors to anAll
75454>>>>>        End_Object
75455>>>>>        
75455>>>>>        Object oCloseButton is a Button
75457>>>>>            Set Label to C_$Close
75458>>>>>            Set Location to 120 210
75459>>>>>            Set Message 0 to (Refproc (Close_Panel))
75460>>>>>            Set Default_State to True
75461>>>>>            Set peAnchors to anBottomRight
75462>>>>>        End_Object
75463>>>>>        
75463>>>>>        On_Key kCancel Send Close_Panel
75464>>>>>    End_Procedure
75465>>>>>End_Class
75466>>>>>
75466>>>>>Class AboutDialog is a ModalPanel
75467>>>>>    Procedure Construct_Object
75469>>>>>        String sVdfRootDir
75469>>>>>        
75469>>>>>        Forward Send Construct_Object
75471>>>>>        
75471>>>>>        Set Label to C_$About
75472>>>>>        Set Size to 89 282
75473>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
75474>>>>>        
75474>>>>>        Object oSysInfoDialog is a SysInfoDialog
75476>>>>>        End_Object
75477>>>>>        
75477>>>>>        Object oBox is a Container3d
75479>>>>>            Set Border_Style to Border_StaticEdge
75480>>>>>            Set Size to 63 272
75481>>>>>            Set Location to 4 5
75482>>>>>            
75482>>>>>            Object oAboutGraphic is a BitmapContainer
75484>>>>>                Set Border_Style to Border_None
75485>>>>>                Set Bitmap_Style to Bitmap_Center
75486>>>>>                Set Size to 48 48
75487>>>>>                Set Location to 7 2
75488>>>>>            End_Object
75489>>>>>            
75489>>>>>            Object oProductName is a TextBox
75491>>>>>                Set Label to C_$ProductName
75492>>>>>                Set Size to 10 45
75493>>>>>                Set Location to 8 53
75494>>>>>            End_Object
75495>>>>>            
75495>>>>>            Object oVersion is a TextBox
75497>>>>>                Set Label to C_$Version
75498>>>>>                Set Size to 10 25
75499>>>>>                Set Location to 21 53
75500>>>>>            End_Object
75501>>>>>            
75501>>>>>            Object oCopyright is a TextBox
75503>>>>>                Set Label to C_$Copyright
75504>>>>>                Set Size to 10 31
75505>>>>>                Set Location to 34 53
75506>>>>>            End_Object
75507>>>>>            
75507>>>>>            Object oAuthor is a TextBox
75509>>>>>                Set Label to C_$Author
75510>>>>>                Set Size to 10 22
75511>>>>>                Set Location to 46 53
75512>>>>>            End_Object
75513>>>>>        End_Object
75514>>>>>        
75514>>>>>        Object oOKButton is a Button
75516>>>>>            On_Item C_$OK Send Close_Panel
75517>>>>>            Set Size to 14 50
75518>>>>>            Set Location to 71 227
75519>>>>>        End_Object
75520>>>>>        
75520>>>>>        Object oSysInfoButton is a Button
75522>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
75523>>>>>            Set Size to 14 50
75524>>>>>            Set Location to 71 171
75525>>>>>        End_Object
75526>>>>>        
75526>>>>>        On_Key Kcancel Send KeyAction of oOKButton
75527>>>>>        
75527>>>>>        Set Logo to "DacAbout.bmp"  // square bitmaps Of 42x42 work best
75528>>>>>    End_Procedure
75529>>>>>    
75529>>>>>    Procedure Set ProductName String sProductName
75531>>>>>        Set Label of oProductName to sProductName
75532>>>>>    End_Procedure
75533>>>>>    
75533>>>>>    Procedure Set Version String sVersion
75535>>>>>        Set Label of oVersion to sVersion
75536>>>>>    End_Procedure
75537>>>>>    
75537>>>>>    Procedure Set Copyright String sCopyright
75539>>>>>        Set Label of oCopyright to sCopyright
75540>>>>>    End_Procedure
75541>>>>>    
75541>>>>>    Procedure Set Author String sAuthor
75543>>>>>        Set Label of oAuthor to sAuthor
75544>>>>>    End_Procedure
75545>>>>>    
75545>>>>>    Procedure Set Logo String sLogo
75547>>>>>        // square bitmaps Of 42x42 work best
75547>>>>>        Set Bitmap of oAboutGraphic to sLogo
75548>>>>>    End_Procedure
75549>>>>>    
75549>>>>>    Procedure Show_Sysinfo
75551>>>>>        Send Popup_Modal of oSysinfoDialog
75552>>>>>    End_Procedure
75553>>>>>    
75553>>>>>    Procedure End_Construct_Object
75555>>>>>        Handle hoVersionInfo
75555>>>>>        Boolean bIncluded
75555>>>>>        Integer iMajor iMinor iRelease iBuild
75555>>>>>        String sLabel
75555>>>>>        
75555>>>>>        Get Label of oVersion to sLabel
75556>>>>>        If (sLabel = C_$VERSION) Begin
75558>>>>>            // set it To the version info Of the program, if available
75558>>>>>            If (ghoApplication <> 0) Begin
75560>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
75561>>>>>                If (hoVersionInfo <> 0) Begin
75563>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
75564>>>>>                    If (bIncluded) Begin
75566>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
75567>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
75568>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
75569>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
75570>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sLabel
75571>>>>>                        Set Version to sLabel
75572>>>>>                    End
75572>>>>>>
75572>>>>>                End
75572>>>>>>
75572>>>>>            End
75572>>>>>>
75572>>>>>        End
75572>>>>>>
75572>>>>>        
75572>>>>>        Forward Send End_Construct_Object
75574>>>>>    End_Procedure
75575>>>>>End_Class
75576>>>
75576>>>//  This is the default message. It is expected that you will
75576>>>//  create your own message to override this
75576>>>Procedure Activate_About
75579>>>    Send DoAbout "" "" "" "" ""
75580>>>End_Procedure
75581>>>
75581>>>//  It is expected that you will send this message (most
75581>>>//  likely from Activate_About. This creates an about object, activates it
75581>>>//  and destroys it when done. It is not exepected that you will augment this.
75581>>>Procedure DoAbout String sTitle String sVersion String sCopyRight String sAuthor String sBitmap
75584>>>    Integer hoObj hoMain
75584>>>    
75584>>>    // create object
75584>>>    Object About is an AboutDialog
75586>>>        // if no title passed use the label of the main panel
75586>>>        // (if a main panel exists).
75586>>>        If (sTitle = "") Begin
75588>>>            Get Main_Window of desktop to hoMain
75589>>>            If hoMain ;                Get Label of hoMain to sTitle
75592>>>        End
75592>>>>
75592>>>        Set productname to sTitle
75593>>>        Set version     to sVersion
75594>>>        Set copyright   to sCopyRight
75595>>>        Set author      to sAuthor
75596>>>        If (sBitmap <> '') ;            Set logo to sBitMap // square bitmaps of 42x42 work best
75599>>>        Move Self to hoObj // object Id
75600>>>    End_Object
75601>>>    Send Popup   of hoObj    // popup the about object
75602>>>    Send Destroy of hoObj // when done, it will be destroyed
75603>>>End_Procedure
75604>>>
75604>        Use ValidacionEmail.vw
Including file: ValidacionEmail.vw    (D:\Downloads\ValidacionEmail\AppSrc\ValidacionEmail.vw)
75604>>>Use Windows.pkg
75604>>>Use DFClient.pkg
75604>>>Use Validacion.pkg
Including file: Validacion.pkg    (D:\Downloads\ValidacionEmail\AppSrc\Validacion.pkg)
75604>>>>>Define cCaracteresPermitidos for "ABCDEFGHIJKLMNÑOPQRSTUVWXYZ0123456789-._"
75604>>>>>Define cLetrasDigitos for "ABCDEFGHIJKLMNÑOPQRSTUVWXYZ0123456789"
75604>>>>>Define cLetras for "ABCDEFGHIJKLMNÑOPQRSTUVWXYZ"
75604>>>>>
75604>>>>>// -------------------------------
75604>>>>>Function ValidacionEmail String sEmail Returns Boolean
75607>>>>>    Boolean bRet
75607>>>>>    String sParteLocal sParteDominio sExtension
75607>>>>>    Integer iLen iPosicionArroba iPosicionUltimoPunto iLongitud
75607>>>>> 
75607>>>>>    //Mayúsculas
75607>>>>>    Move (Uppercase(sEmail)) to sEmail
75608>>>>>    
75608>>>>>    //Elimina los espacios en blanco
75608>>>>>    Move (Trim(sEmail)) to sEmail
75609>>>>>    
75609>>>>>    //Divide en parte local y dominio  
75609>>>>>    Move (Length(sEmail)) to iLen
75610>>>>>    Move (Pos("@", sEmail)) to iPosicionArroba
75611>>>>>    Move (Mid(sEmail,(iPosicionArroba-1),1)) to sParteLocal
75612>>>>>    Move (Mid(sEmail,(iLen -iPosicionArroba), (iPosicionArroba+1))) to sParteDominio
75613>>>>>    
75613>>>>>    //Obtiene la extension
75613>>>>>    Move (Length(sParteDominio)) to iLongitud
75614>>>>>    Move (RightPos(".",sParteDominio)) to iPosicionUltimoPunto
75615>>>>>    Move (Mid(sParteDominio,(iLongitud - iPosicionUltimoPunto),(iPosicionUltimoPunto +1))) to sExtension
75616>>>>>    
75616>>>>>    
75616>>>>>    // ---------------
75616>>>>>    //Comprueba que no está vacío el campo
75616>>>>>    If (sEmail= "") Begin
75618>>>>>        Send Info_Box "Introduce tu email" "ERROR"
75619>>>>>        Function_Return False
75620>>>>>    End
75620>>>>>>
75620>>>>>    
75620>>>>>     // --------------
75620>>>>>    //Comprueba la longitud total
75620>>>>>    If ((Length(sEmail)) >= 256) Begin
75622>>>>>        Send Info_Box "Longitud total no permitida" "ERROR"
75623>>>>>        Function_Return False
75624>>>>>    End
75624>>>>>>
75624>>>>>    
75624>>>>>     // --------------
75624>>>>>    //Comprueba que no haya dos puntos seguidos
75624>>>>>    If (Pos("..", sEmail) > 0) Begin
75626>>>>>        Send Info_Box "Dos puntos seguidos no está permitido" "ERROR"
75627>>>>>        Function_Return False
75628>>>>>    End
75628>>>>>>
75628>>>>>    
75628>>>>>    // --------------
75628>>>>>    //Comprueba que contenga 1 solo arroba   
75628>>>>>    Get UnArroba sEmail to bRet
75629>>>>>    If (not(bRet)) Begin
75631>>>>>        Send Info_Box "El email debe contener una @" "ERROR"
75632>>>>>        Function_Return False
75633>>>>>    End
75633>>>>>>
75633>>>>>    
75633>>>>>      // --------------
75633>>>>>    //Comprueba caracteres permitidos local
75633>>>>>    Get CaracteresPermitidosLocal sParteLocal to bRet
75634>>>>>    If (not(bRet)) Begin
75636>>>>>        Send Info_Box "Caracter no permitido en la parte local (solo se admiten letras, números y '_', '-' o '.')" "ERROR"
75637>>>>>        Function_Return False
75638>>>>>    End
75638>>>>>>
75638>>>>>    
75638>>>>>      // --------------
75638>>>>>    //Comprueba caracteres permitidos dominio
75638>>>>>    Get CaracteresPermitidosDominio sParteDominio to bRet
75639>>>>>    If (not(bRet)) Begin
75641>>>>>        Send Info_Box "Caracter no permitido en el dominio (solo se admiten letras, números y '_', '-' o '.')" "ERROR"
75642>>>>>        Function_Return False
75643>>>>>    End
75643>>>>>>
75643>>>>>    // --------------
75643>>>>>    //Comprueba longitud de la parte local
75643>>>>>    Get LongitudParteLocal sParteLocal to bRet
75644>>>>>    If (not(bRet)) Begin
75646>>>>>        Send Info_Box "La longitud de la parte local, antes del símbolo '@', debe estar comprendida entre 1 y 64 caracteres." "ERROR"
75647>>>>>        Function_Return False
75648>>>>>    End
75648>>>>>>
75648>>>>>    
75648>>>>>    // --------------
75648>>>>>    //Comprueba longitud de la parte dominio 
75648>>>>>    Get LongitudParteDominio sParteDominio to bRet
75649>>>>>    If (not(bRet)) Begin
75651>>>>>        Send Info_Box "La longitud del dominio, después del símbolo '@', debe estar comprendida entre 4 y 255 caracteres" "ERROR"
75652>>>>>        Function_Return False
75653>>>>>    End
75653>>>>>>
75653>>>>>
75653>>>>> // --------------
75653>>>>>    //Comprueba primer caracter parte local 
75653>>>>>    Get PrimerCaracterLocal sParteLocal to bRet
75654>>>>>    If (not(bRet)) Begin
75656>>>>>        Send Info_Box  "El primer caracter del nombre del email, antes del símbolo '@', debe ser una letra o un dígito" "ERROR"
75657>>>>>        Function_Return False
75658>>>>>    End
75658>>>>>>
75658>>>>>    
75658>>>>> // --------------
75658>>>>>    //Comprueba primer caracter parte dominio 
75658>>>>>    Get PrimerCaracterDominio sParteDominio to bRet
75659>>>>>    If (not(bRet)) Begin
75661>>>>>        Send Info_Box "El primer caracter del dominio, después del símbolo '@', debe ser una letra o un dígito" "ERROR"
75662>>>>>        Function_Return False
75663>>>>>    End
75663>>>>>>
75663>>>>>
75663>>>>>// --------------
75663>>>>>    //Comprueba que la extension está formada por letras
75663>>>>>    Get CaracteresExtensionDominio sExtension to bRet
75664>>>>>    If (not(bRet)) Begin
75666>>>>>        Send Info_Box "La extensión sólo puede contener letras" "ERROR"
75667>>>>>        Function_Return False
75668>>>>>    End
75668>>>>>>
75668>>>>> 
75668>>>>>// --------------
75668>>>>>    //Comprueba que la longitud de la extension es correcta
75668>>>>>    Get LongitudExtensionDominio sExtension to bRet
75669>>>>>    If (not(bRet)) Begin
75671>>>>>        Send Info_Box "La longitud de la extensión debe contener entre 2 y 4 letras" "ERROR"
75672>>>>>        Function_Return False
75673>>>>>    End
75673>>>>>>
75673>>>>>    
75673>>>>>
75673>>>>>   Function_Return True
75674>>>>>End_Function
75675>>>>>
75675>>>>>
75675>>>>>//Función que comprueba que está compuesto por letras, digitos y -._
75675>>>>>Function CaracteresPermitidosLocal String sEmail Returns Boolean
75678>>>>>   Integer iCount 
75678>>>>>   String sCaracteres 
75678>>>>>    
75678>>>>>    //Itera sobre el email
75678>>>>>    For iCount from 1 to (Length(sEmail))
75684>>>>>>
75684>>>>>        
75684>>>>>        //Extrae los caracteres
75684>>>>>        Move (Mid(sEmail, 1, iCount)) to sCaracteres
75685>>>>>
75685>>>>>        //Comprueba que es válido
75685>>>>>        If (Pos(sCaracteres, cCaracteresPermitidos) = 0) Begin
75687>>>>>            Function_Return False
75688>>>>>        End
75688>>>>>>
75688>>>>>
75688>>>>>    Loop 
75689>>>>>>
75689>>>>>    
75689>>>>>        Function_Return True
75690>>>>>End_Function
75691>>>>>
75691>>>>>// -----------------------------------
75691>>>>>//Función que comprueba que la parte del dominio está compuesto por letras, digitos y -._
75691>>>>>Function CaracteresPermitidosDominio String sParteDominio Returns Boolean
75694>>>>>   Integer iCount 
75694>>>>>   String sCaracteres
75694>>>>>    
75694>>>>>    //Itera sobre el email
75694>>>>>    For iCount from 1 to (Length(sParteDominio))
75700>>>>>>
75700>>>>>        
75700>>>>>        //Extrae los caracteres
75700>>>>>        Move (Mid(sParteDominio, 1, iCount)) to sCaracteres
75701>>>>>
75701>>>>>        //Comprueba que es válido
75701>>>>>        If (Pos(sCaracteres, cCaracteresPermitidos) = 0) Begin
75703>>>>>            Function_Return False
75704>>>>>        End
75704>>>>>>
75704>>>>>
75704>>>>>    Loop 
75705>>>>>>
75705>>>>>    
75705>>>>>        Function_Return True
75706>>>>>End_Function
75707>>>>>
75707>>>>>// -----------------------------------
75707>>>>>//Función que comprueba que contiene 1 solo arroba
75707>>>>>Function UnArroba String sEmail Returns Boolean
75710>>>>>    Integer iCount iCountArroba
75710>>>>>    
75710>>>>>    //Itera a través del email, si hay arroba, suma el contador
75710>>>>>    For iCount from 1 to (Length(sEmail))
75716>>>>>>
75716>>>>>        If (Mid(sEmail, 1, iCount) = "@") Begin
75718>>>>>            Add 1 to iCountArroba
75719>>>>>        End
75719>>>>>>
75719>>>>>    Loop
75720>>>>>>
75720>>>>>    
75720>>>>>    If (iCountArroba = 1) Begin
75722>>>>>        Function_Return True
75723>>>>>    End
75723>>>>>>
75723>>>>>    Else Begin
75724>>>>>        Function_Return False
75725>>>>>    End
75725>>>>>>
75725>>>>>End_Function
75726>>>>>
75726>>>>>// -----------------------------------
75726>>>>>// Función que comprueba la longitud de la parte local 
75726>>>>>Function LongitudParteLocal String sParteLocal Returns Boolean
75729>>>>>   
75729>>>>>    If ((Length(sParteLocal)) >= 1 and (Length(sParteLocal)) <= 64) Begin
75731>>>>>        Function_Return True
75732>>>>>    End
75732>>>>>>
75732>>>>>    Function_Return False
75733>>>>>End_Function
75734>>>>>
75734>>>>>// -----------------------------------
75734>>>>>// Función que comprueba la longitud del dominio
75734>>>>>Function LongitudParteDominio String sParteDominio Returns Boolean
75737>>>>>
75737>>>>>     If ((Length(sParteDominio)) >= 4 and (Length(sParteDominio)) <= 255) Begin
75739>>>>>        Function_Return True
75740>>>>>     End
75740>>>>>>
75740>>>>>     Function_Return False
75741>>>>>End_Function
75742>>>>>
75742>>>>>// -----------------------------------
75742>>>>>// Función que Verifica que el primer caracter sea válido en parte local
75742>>>>>Function PrimerCaracterLocal String sParteLocal Returns Boolean
75745>>>>>    String sPrimerCaracter sPrimerCaracterCadena
75745>>>>>    Integer iCount 
75745>>>>>    
75745>>>>>     Move (Left(sParteLocal, 1)) to sPrimerCaracter
75746>>>>>     For iCount from 1 to (Length(cLetrasDigitos))
75752>>>>>>
75752>>>>>        Move (Mid(cLetrasDigitos,1,iCount)) to sPrimerCaracterCadena
75753>>>>>        If (sPrimerCaracter=sPrimerCaracterCadena) Begin
75755>>>>>            Function_Return True
75756>>>>>        End
75756>>>>>>
75756>>>>>     Loop
75757>>>>>>
75757>>>>>     Function_Return False
75758>>>>>End_Function
75759>>>>>
75759>>>>>// -----------------------------------
75759>>>>>// Función que Verifica que el primer caracter sea válido en parte dominio
75759>>>>>Function PrimerCaracterDominio String sParteDominio Returns Boolean
75762>>>>>    String sPrimerCaracter sPrimerCaracterCadena
75762>>>>>    Integer iCount 
75762>>>>>    
75762>>>>>     Move (Left(sParteDominio, 1)) to sPrimerCaracter
75763>>>>>     For iCount from 1 to (Length(cLetrasDigitos))
75769>>>>>>
75769>>>>>        Move (Mid(cLetrasDigitos,1,iCount)) to sPrimerCaracterCadena
75770>>>>>        If (sPrimerCaracter=sPrimerCaracterCadena) Begin
75772>>>>>            Function_Return True
75773>>>>>        End
75773>>>>>>
75773>>>>>     Loop
75774>>>>>>
75774>>>>>     Function_Return False
75775>>>>>End_Function
75776>>>>>
75776>>>>>// -----------------------------------
75776>>>>>// Función que Verifica que la extensión está formada por letras
75776>>>>>Function CaracteresExtensionDominio String sExtension Returns Boolean
75779>>>>>   
75779>>>>>   Integer iCount 
75779>>>>>   String sCaracteres
75779>>>>>    
75779>>>>>    //Itera sobre la extensión
75779>>>>>    For iCount from 1 to (Length(sExtension))
75785>>>>>>
75785>>>>>        
75785>>>>>        //Extrae los caracteres
75785>>>>>        Move (Mid(sExtension, 1, iCount)) to sCaracteres
75786>>>>>
75786>>>>>        //Comprueba que es válido
75786>>>>>        If (Pos(sCaracteres, cLetras) = 0) Begin
75788>>>>>            Function_Return False
75789>>>>>        End
75789>>>>>>
75789>>>>>    Loop 
75790>>>>>>
75790>>>>>    Function_Return True
75791>>>>>End_Function
75792>>>>>
75792>>>>>// -----------------------------------
75792>>>>>// Función que Verifica la longitud de la extensión
75792>>>>>Function LongitudExtensionDominio String sExtension Returns Boolean
75795>>>>>   
75795>>>>>    If ((Length(sExtension)) >= 2 and (Length(sExtension)) <= 4) Begin
75797>>>>>        Function_Return True
75798>>>>>    End
75798>>>>>>
75798>>>>>End_Function
75799>>>>>       
75799>>>>>
75799>>>>>       
75799>>>>>
75799>>>
75799>>>Deferred_View Activate_oValidacionEmail for ;Object oValidacionEmail is a dbView
75824>>>
75824>>>    Set Border_Style to Border_Thick
75825>>>    Set Size to 200 300
75826>>>    Set Location to 2 2
75827>>>    Set Label to "ValidacionEmail"
75828>>>   
75828>>>    Object oForm1 is a Form
75830>>>       Set Size to 12 100
75831>>>       Set Location to 66 37
75832>>>       Set psPlaceHolder to "Introduce tu email"
75833>>>       
75833>>>    End_Object
75834>>>    
75834>>>    Object oButton1 is a Button
75836>>>        Set Location to 66 171
75837>>>        Set Label to 'Validar'
75838>>>    
75838>>>        Procedure OnClick
75841>>>            String sValue
75841>>>            Boolean bRet
75841>>>            Get Value of oForm1 to sValue
75842>>>            Get ValidacionEmail sValue to bRet
75843>>>            
75843>>>             If (bRet) Begin
75845>>>                Set Label of oTextBox1 to ("Email: "+sValue)
75846>>>                Set Color of oTextBox1 to (RGB( 58, 255, 51))
75847>>>            End
75847>>>>
75847>>>            Else Begin
75848>>>                Set Label of oTextBox1 to ("Email: "+sValue)
75849>>>                Set Color of oTextBox1 to (RGB( 255, 62, 48))
75850>>>            End
75850>>>>
75850>>>        End_Procedure
75851>>>    
75851>>>    End_Object
75852>>>    
75852>>>    Object oTextBox1 is a TextBox
75854>>>        Set Size to 9 34
75855>>>        Set Location to 90 39
75856>>>        Set Label to 'Email:'
75857>>>    End_Object
75858>>>    
75858>>>Cd_End_Object
75860>>>>
75860>
75860>        Procedure Activate_About
75863>            Send DoAbout "" "" "" "" ""
75864>        End_Procedure
75865>
75865>    End_Object
75866>
75866>End_Object
75867>
75867>Start_UI
75868>
75868>//************************** end of WindowsProject.tpl for Spanish **************
75868>
Summary
Memory Available: 13034770432
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 43914
Total Resources: 0
Total Commands : 75867
Total Windows  : 0
Total Pages    : 0
Static Data    : 540176
Message area   : 525600
Total Blocks   : 28503
